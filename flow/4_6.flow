{
    "connections": [
        {
            "in_id": "{04cc13a1-3f18-4545-87d6-b3563bfff914}",
            "in_index": 0,
            "out_id": "{c6609cc5-06b2-45af-b2dd-87f7d3500493}",
            "out_index": 0
        },
        {
            "in_id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "in_index": 0,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{3cf576a6-c021-425e-929d-22ba8eeb3c2e}",
            "in_index": 0,
            "out_id": "{8af22562-d21e-4e35-84f8-c2bb93d8372a}",
            "out_index": 0
        },
        {
            "in_id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "in_index": 0,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{50db453f-68b5-4389-bb89-882fe0c09c8a}",
            "in_index": 0,
            "out_id": "{570fc92b-19c3-476e-916b-715acc43928f}",
            "out_index": 0
        },
        {
            "in_id": "{b77d814d-40f9-4cbe-ab27-c92af9b565d9}",
            "in_index": 0,
            "out_id": "{5c0c5d9a-ec7e-4444-bbea-2b6ad582c392}",
            "out_index": 0
        },
        {
            "in_id": "{73adcba7-0dea-48bf-88bc-765e2ba78098}",
            "in_index": 0,
            "out_id": "{fb4c1937-6f1d-4efc-9e23-02b66afd8133}",
            "out_index": 0
        },
        {
            "in_id": "{272bfc89-161b-49ad-86f9-18fd6aaac437}",
            "in_index": 0,
            "out_id": "{50db453f-68b5-4389-bb89-882fe0c09c8a}",
            "out_index": 0
        },
        {
            "in_id": "{8d1cf23d-64a1-45e1-ac4f-9294f4d8307b}",
            "in_index": 0,
            "out_id": "{fb4c1937-6f1d-4efc-9e23-02b66afd8133}",
            "out_index": 0
        },
        {
            "in_id": "{828864d7-6f81-4bb9-92a1-d5cc6d2eca30}",
            "in_index": 0,
            "out_id": "{c8e96549-15a9-47a9-9fd6-4802bf51fb30}",
            "out_index": 0
        },
        {
            "in_id": "{3b11efa0-0a88-4a80-995e-f541e612d85a}",
            "in_index": 1,
            "out_id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "out_index": 0
        },
        {
            "in_id": "{8af22562-d21e-4e35-84f8-c2bb93d8372a}",
            "in_index": 0,
            "out_id": "{502c7ba6-fbfc-429b-a553-0ed9d98215ab}",
            "out_index": 0
        },
        {
            "in_id": "{e03e4e42-6e2b-442f-a7d9-f68291a2e49c}",
            "in_index": 0,
            "out_id": "{9f8aed34-8322-4055-892b-939b54c495c7}",
            "out_index": 0
        },
        {
            "in_id": "{502c7ba6-fbfc-429b-a553-0ed9d98215ab}",
            "in_index": 0,
            "out_id": "{29a9022c-e980-4601-a630-9d72c99ed98d}",
            "out_index": 1
        },
        {
            "in_id": "{efa54390-cd04-4808-8dd7-9c1104188f6d}",
            "in_index": 0,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{8a2045d8-4a90-4ccc-9e53-ed9524cafb6b}",
            "in_index": 0,
            "out_id": "{c057b6e7-e172-4ac1-bac6-6c7fe488321f}",
            "out_index": 0
        },
        {
            "in_id": "{0be9eede-5d1f-48b2-b710-92808ec3562c}",
            "in_index": 0,
            "out_id": "{1cf3b482-043d-44f9-8eff-1d092d46353f}",
            "out_index": 0
        },
        {
            "in_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "in_index": 0,
            "out_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "out_index": 0
        },
        {
            "in_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "in_index": 0,
            "out_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "out_index": 0
        },
        {
            "in_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "in_index": 1,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{b7e92e18-6609-4c10-bcb1-8a0f77994257}",
            "in_index": 0,
            "out_id": "{3589081f-1a69-4b0c-842a-9e4c9493d4b8}",
            "out_index": 0
        },
        {
            "in_id": "{d952503a-2180-410b-80d3-be2a8d487767}",
            "in_index": 0,
            "out_id": "{505c22ad-7c09-4009-8a9a-709ab93f196e}",
            "out_index": 0
        },
        {
            "in_id": "{9bd6b15f-8836-452c-8577-86e8a4bea318}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{481fc91e-2e07-4f0e-ab60-5b2b8214cb24}",
            "in_index": 0,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{3e8bc090-ee42-4a29-9c59-006475873034}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{aa214be4-80ff-440d-9aab-d78ae147f17e}",
            "in_index": 0,
            "out_id": "{62716a2c-d6b6-49db-9050-f7c90fcf3066}",
            "out_index": 0
        },
        {
            "in_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "in_index": 0,
            "out_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "out_index": 0
        },
        {
            "in_id": "{06a9773d-3eac-4a58-9602-0b329facf726}",
            "in_index": 0,
            "out_id": "{9a41f874-47b7-4456-8fe4-9c3a40393f1a}",
            "out_index": 0
        },
        {
            "in_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "in_index": 1,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{96feb387-a130-4702-9862-0c6dd9f445f5}",
            "in_index": 0,
            "out_id": "{c8e96549-15a9-47a9-9fd6-4802bf51fb30}",
            "out_index": 1
        },
        {
            "in_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "in_index": 0,
            "out_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "out_index": 0
        },
        {
            "in_id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "in_index": 0,
            "out_id": "{c040b4b6-2973-4ca0-990c-7efd067f4463}",
            "out_index": 0
        },
        {
            "in_id": "{c6609cc5-06b2-45af-b2dd-87f7d3500493}",
            "in_index": 0,
            "out_id": "{505c22ad-7c09-4009-8a9a-709ab93f196e}",
            "out_index": 0
        },
        {
            "in_id": "{3e61c803-814c-4f38-be41-2d2deaa4e52e}",
            "in_index": 0,
            "out_id": "{d68ec537-da7f-4bb8-8940-3ac4cd7c4228}",
            "out_index": 0
        },
        {
            "in_id": "{50db453f-68b5-4389-bb89-882fe0c09c8a}",
            "in_index": 1,
            "out_id": "{570fc92b-19c3-476e-916b-715acc43928f}",
            "out_index": 1
        },
        {
            "in_id": "{272bfc89-161b-49ad-86f9-18fd6aaac437}",
            "in_index": 1,
            "out_id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "out_index": 0
        },
        {
            "in_id": "{505c22ad-7c09-4009-8a9a-709ab93f196e}",
            "in_index": 0,
            "out_id": "{fa718f6d-5eaf-4140-a605-877d1836c30f}",
            "out_index": 0
        },
        {
            "in_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "in_index": 0,
            "out_id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "out_index": 0
        },
        {
            "in_id": "{b9afa0ea-1327-4521-b85b-d146053bbd27}",
            "in_index": 0,
            "out_id": "{d68ec537-da7f-4bb8-8940-3ac4cd7c4228}",
            "out_index": 0
        },
        {
            "in_id": "{20c1f477-b192-4f8d-a9f5-6ae4371fd887}",
            "in_index": 0,
            "out_id": "{e51507b9-d4b2-48f2-a2fc-205fd76532a7}",
            "out_index": 0
        },
        {
            "in_id": "{62716a2c-d6b6-49db-9050-f7c90fcf3066}",
            "in_index": 0,
            "out_id": "{b7e92e18-6609-4c10-bcb1-8a0f77994257}",
            "out_index": 0
        },
        {
            "in_id": "{c1a10095-7c80-4a62-a566-5ca6d0a157ae}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "in_index": 0,
            "out_id": "{8525c24c-c2a3-4997-815e-c4c289a63dd9}",
            "out_index": 0
        },
        {
            "in_id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "in_index": 0,
            "out_id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "out_index": 0
        },
        {
            "in_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "in_index": 0,
            "out_id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "out_index": 0
        },
        {
            "in_id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "in_index": 0,
            "out_id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "out_index": 0
        },
        {
            "in_id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "in_index": 0,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{3589081f-1a69-4b0c-842a-9e4c9493d4b8}",
            "in_index": 1,
            "out_id": "{aa214be4-80ff-440d-9aab-d78ae147f17e}",
            "out_index": 0
        },
        {
            "in_id": "{c6609cc5-06b2-45af-b2dd-87f7d3500493}",
            "in_index": 1,
            "out_id": "{505c22ad-7c09-4009-8a9a-709ab93f196e}",
            "out_index": 1
        },
        {
            "in_id": "{29a9022c-e980-4601-a630-9d72c99ed98d}",
            "in_index": 0,
            "out_id": "{d952503a-2180-410b-80d3-be2a8d487767}",
            "out_index": 0
        },
        {
            "in_id": "{3589081f-1a69-4b0c-842a-9e4c9493d4b8}",
            "in_index": 0,
            "out_id": "{aa214be4-80ff-440d-9aab-d78ae147f17e}",
            "out_index": 1
        },
        {
            "in_id": "{6e2e7bd0-abae-4f31-8b45-c2bf6a993d5f}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "in_index": 0,
            "out_id": "{aa214be4-80ff-440d-9aab-d78ae147f17e}",
            "out_index": 0
        },
        {
            "in_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "in_index": 0,
            "out_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "out_index": 0
        },
        {
            "in_id": "{1cf3b482-043d-44f9-8eff-1d092d46353f}",
            "in_index": 0,
            "out_id": "{73c0c048-e5e1-41bd-a76c-7c15c01b564a}",
            "out_index": 0
        },
        {
            "in_id": "{e51507b9-d4b2-48f2-a2fc-205fd76532a7}",
            "in_index": 0,
            "out_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "out_index": 0
        },
        {
            "in_id": "{8525c24c-c2a3-4997-815e-c4c289a63dd9}",
            "in_index": 0,
            "out_id": "{851226a6-4fff-49d6-ac41-9ef57555026b}",
            "out_index": 0
        },
        {
            "in_id": "{5cb93eae-bfde-4e34-904c-7461c7a689d7}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{c3fc61c6-3096-480f-8721-e46c272215da}",
            "in_index": 0,
            "out_id": "{272bfc89-161b-49ad-86f9-18fd6aaac437}",
            "out_index": 0
        },
        {
            "in_id": "{d68ec537-da7f-4bb8-8940-3ac4cd7c4228}",
            "in_index": 0,
            "out_id": "{27212482-7bee-43b4-bf04-721d11a1ab8f}",
            "out_index": 0
        },
        {
            "in_id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{7c4d9cac-e468-4cf6-a352-94e892c140c3}",
            "in_index": 0,
            "out_id": "{2414d927-2fa5-4456-87f8-c3aae2d33b13}",
            "out_index": 0
        },
        {
            "in_id": "{99040bad-3773-412a-a8d4-a31b81dfc310}",
            "in_index": 0,
            "out_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "out_index": 0
        },
        {
            "in_id": "{851226a6-4fff-49d6-ac41-9ef57555026b}",
            "in_index": 0,
            "out_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "out_index": 0
        },
        {
            "in_id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "in_index": 0,
            "out_id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "out_index": 0
        },
        {
            "in_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "in_index": 1,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{570fc92b-19c3-476e-916b-715acc43928f}",
            "in_index": 0,
            "out_id": "{c3fc61c6-3096-480f-8721-e46c272215da}",
            "out_index": 0
        },
        {
            "in_id": "{27212482-7bee-43b4-bf04-721d11a1ab8f}",
            "in_index": 0,
            "out_id": "{9a41f874-47b7-4456-8fe4-9c3a40393f1a}",
            "out_index": 1
        },
        {
            "in_id": "{3b11efa0-0a88-4a80-995e-f541e612d85a}",
            "in_index": 0,
            "out_id": "{81e85025-d222-4116-bcaf-2c15d64e1c7a}",
            "out_index": 0
        },
        {
            "in_id": "{41ecf3e4-5301-450c-9d65-2ddb5599c996}",
            "in_index": 0,
            "out_id": "{8af22562-d21e-4e35-84f8-c2bb93d8372a}",
            "out_index": 0
        },
        {
            "in_id": "{29f053d4-75df-4ec6-be4f-f414ff764a61}",
            "in_index": 0,
            "out_id": "{d50208ac-c2b5-4a0b-a3fb-97a59fa10636}",
            "out_index": 0
        },
        {
            "in_id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "in_index": 0,
            "out_id": "{20c1f477-b192-4f8d-a9f5-6ae4371fd887}",
            "out_index": 0
        },
        {
            "in_id": "{552beefc-9874-482a-9de1-289740306897}",
            "in_index": 0,
            "out_id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "out_index": 0
        },
        {
            "in_id": "{fb4c1937-6f1d-4efc-9e23-02b66afd8133}",
            "in_index": 0,
            "out_id": "{96feb387-a130-4702-9862-0c6dd9f445f5}",
            "out_index": 0
        },
        {
            "in_id": "{9f8aed34-8322-4055-892b-939b54c495c7}",
            "in_index": 0,
            "out_id": "{29a9022c-e980-4601-a630-9d72c99ed98d}",
            "out_index": 0
        },
        {
            "in_id": "{73c0c048-e5e1-41bd-a76c-7c15c01b564a}",
            "in_index": 0,
            "out_id": "{06a9773d-3eac-4a58-9602-0b329facf726}",
            "out_index": 0
        },
        {
            "in_id": "{67cca78b-5dec-4afd-8526-2c80b3ab049d}",
            "in_index": 0,
            "out_id": "{828864d7-6f81-4bb9-92a1-d5cc6d2eca30}",
            "out_index": 0
        },
        {
            "in_id": "{81e85025-d222-4116-bcaf-2c15d64e1c7a}",
            "in_index": 0,
            "out_id": "{5c0c5d9a-ec7e-4444-bbea-2b6ad582c392}",
            "out_index": 0
        },
        {
            "in_id": "{1850d18d-5c0d-4386-b12a-cd6dc82b3d41}",
            "in_index": 0,
            "out_id": "{c057b6e7-e172-4ac1-bac6-6c7fe488321f}",
            "out_index": 0
        },
        {
            "in_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "in_index": 0,
            "out_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "out_index": 0
        },
        {
            "in_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "in_index": 0,
            "out_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "out_index": 0
        },
        {
            "in_id": "{ab42ff59-6660-4b30-861e-822441bfe2fa}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{1ecd17d4-3ae3-40e0-8429-558fe5f77f75}",
            "in_index": 0,
            "out_id": "{d50208ac-c2b5-4a0b-a3fb-97a59fa10636}",
            "out_index": 0
        },
        {
            "in_id": "{7b98cd23-df2a-47d2-9a0d-f120a9fe63f3}",
            "in_index": 0,
            "out_id": "{570fc92b-19c3-476e-916b-715acc43928f}",
            "out_index": 0
        },
        {
            "in_id": "{f43757c1-e213-46b9-98ea-0d2a24d806f8}",
            "in_index": 0,
            "out_id": "{3b11efa0-0a88-4a80-995e-f541e612d85a}",
            "out_index": 0
        },
        {
            "in_id": "{5c0c5d9a-ec7e-4444-bbea-2b6ad582c392}",
            "in_index": 0,
            "out_id": "{f43757c1-e213-46b9-98ea-0d2a24d806f8}",
            "out_index": 0
        },
        {
            "in_id": "{407f428f-2ff1-4a7c-ba36-4c38c817d6cf}",
            "in_index": 0,
            "out_id": "{2414d927-2fa5-4456-87f8-c3aae2d33b13}",
            "out_index": 0
        },
        {
            "in_id": "{7270da17-0484-4a33-aeb9-e8f81ec2fb22}",
            "in_index": 0,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "in_index": 0,
            "out_id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "out_index": 0
        },
        {
            "in_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "in_index": 0,
            "out_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "out_index": 0
        },
        {
            "in_id": "{fa718f6d-5eaf-4140-a605-877d1836c30f}",
            "in_index": 0,
            "out_id": "{04cc13a1-3f18-4545-87d6-b3563bfff914}",
            "out_index": 0
        },
        {
            "in_id": "{d50208ac-c2b5-4a0b-a3fb-97a59fa10636}",
            "in_index": 0,
            "out_id": "{e03e4e42-6e2b-442f-a7d9-f68291a2e49c}",
            "out_index": 0
        },
        {
            "in_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "in_index": 0,
            "out_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "out_index": 0
        },
        {
            "in_id": "{04cc13a1-3f18-4545-87d6-b3563bfff914}",
            "in_index": 1,
            "out_id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "out_index": 0
        },
        {
            "in_id": "{ab8f33ae-2daf-4bc6-be57-4adb782634aa}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "in_index": 0,
            "out_id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "out_index": 0
        },
        {
            "in_id": "{9a41f874-47b7-4456-8fe4-9c3a40393f1a}",
            "in_index": 0,
            "out_id": "{b77d814d-40f9-4cbe-ab27-c92af9b565d9}",
            "out_index": 0
        },
        {
            "in_id": "{2414d927-2fa5-4456-87f8-c3aae2d33b13}",
            "in_index": 0,
            "out_id": "{7c4d9cac-e468-4cf6-a352-94e892c140c3}",
            "out_index": 0
        },
        {
            "in_id": "{7ff9e895-1a2a-4842-9873-6fc7d828df44}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{c057b6e7-e172-4ac1-bac6-6c7fe488321f}",
            "in_index": 0,
            "out_id": "{67cca78b-5dec-4afd-8526-2c80b3ab049d}",
            "out_index": 0
        },
        {
            "in_id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{c8e96549-15a9-47a9-9fd6-4802bf51fb30}",
            "in_index": 0,
            "out_id": "{7b98cd23-df2a-47d2-9a0d-f120a9fe63f3}",
            "out_index": 0
        },
        {
            "in_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "in_index": 0,
            "out_id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "out_index": 0
        },
        {
            "in_id": "{81e85025-d222-4116-bcaf-2c15d64e1c7a}",
            "in_index": 1,
            "out_id": "{5c0c5d9a-ec7e-4444-bbea-2b6ad582c392}",
            "out_index": 1
        },
        {
            "in_id": "{9d53b347-9e90-4557-b507-57c518c84aa6}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{580c59a7-7031-41f9-8f53-e693c9eefff6}",
            "in_index": 0,
            "out_id": "{1cf3b482-043d-44f9-8eff-1d092d46353f}",
            "out_index": 0
        },
        {
            "in_id": "{c040b4b6-2973-4ca0-990c-7efd067f4463}",
            "in_index": 0,
            "out_id": "{99040bad-3773-412a-a8d4-a31b81dfc310}",
            "out_index": 0
        }
    ],
    "nodes": [
        {
            "id": "{04cc13a1-3f18-4545-87d6-b3563bfff914}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1161.1166127298507,
                "y": -1395.0007817961055
            }
        },
        {
            "id": "{fa718f6d-5eaf-4140-a605-877d1836c30f}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1045.7668717285546,
                "y": -1413.0401515795952
            }
        },
        {
            "id": "{5c0c5d9a-ec7e-4444-bbea-2b6ad582c392}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -874.6591229682244,
                "y": -2608.669796515051
            }
        },
        {
            "id": "{7ff9e895-1a2a-4842-9873-6fc7d828df44}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -171.5826255749766,
                "y": -3300.7410681393594
            }
        },
        {
            "id": "{d50208ac-c2b5-4a0b-a3fb-97a59fa10636}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -93.67730810585135,
                "y": -1410.4480334865707
            }
        },
        {
            "id": "{0be9eede-5d1f-48b2-b710-92808ec3562c}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 104.82249005342987,
                "y": -2685.499908055241
            }
        },
        {
            "id": "{272bfc89-161b-49ad-86f9-18fd6aaac437}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1175.6971127298502,
                "y": -3733.8702817961025
            }
        },
        {
            "id": "{e51507b9-d4b2-48f2-a2fc-205fd76532a7}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai4",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer4"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai5",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer5"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai6",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer6"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 1200,
                    "roi_x": 0,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai6",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -957.4746760049475,
                "y": -1697.750980772498
            }
        },
        {
            "id": "{9a41f874-47b7-4456-8fe4-9c3a40393f1a}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -581.5143924170325,
                "y": -2609.497882028338
            }
        },
        {
            "id": "{570fc92b-19c3-476e-916b-715acc43928f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -905.4052229682237,
                "y": -3750.667796515048
            }
        },
        {
            "id": "{f43757c1-e213-46b9-98ea-0d2a24d806f8}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1029.6012717285548,
                "y": -2609.9116515795963
            }
        },
        {
            "id": "{fb4c1937-6f1d-4efc-9e23-02b66afd8133}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -280.40212092601257,
                "y": -3608.774501726441
            }
        },
        {
            "id": "{8a2045d8-4a90-4ccc-9e53-ed9524cafb6b}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 74.07639005343037,
                "y": -3827.497908055238
            }
        },
        {
            "id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1554.3607805339907,
                "y": -1407.6278447459938
            }
        },
        {
            "id": "{1cf3b482-043d-44f9-8eff-1d092d46353f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -77.51170810585154,
                "y": -2607.319533486571
            }
        },
        {
            "id": "{580c59a7-7031-41f9-8f53-e693c9eefff6}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 107.40776428333243,
                "y": -2556.411799319498
            }
        },
        {
            "id": "{1850d18d-5c0d-4386-b12a-cd6dc82b3d41}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 76.66166428333293,
                "y": -3698.409799319495
            }
        },
        {
            "id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "model": {
                "delay_time": 2000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "make sure value",
                    "show": true
                }
            },
            "position": {
                "x": -1814,
                "y": -4017
            }
        },
        {
            "id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "model": {
                "camId": "6209",
                "data": {
                    "4475": "rtsp://admin:123456@10.36.8.20:554/video2",
                    "6209": "rtsp://admin:123456@10.36.8.21:554/video2",
                    "913": "rtsp://admin:123456@10.36.8.19:554/video2"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1084.6613169569566,
                "y": -4033.304054924424
            }
        },
        {
            "id": "{06a9773d-3eac-4a58-9602-0b329facf726}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -442.2623597689894,
                "y": -2609.311690511366
            }
        },
        {
            "id": "{96feb387-a130-4702-9862-0c6dd9f445f5}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -476.2150713392365,
                "y": -3608.4171285278903
            }
        },
        {
            "id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -513.3535396399486,
                "y": -1702.4889219310155
            }
        },
        {
            "id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"4\"\npayload.setparam.result_path = \"\"\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1508.9933578560187,
                "y": -4016.0568220811406
            }
        },
        {
            "id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1240.2657261508286,
                "y": -1701.1749099328047
            }
        },
        {
            "id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1232.6852166318286,
                "y": -2865.224174240545
            }
        },
        {
            "id": "{c040b4b6-2973-4ca0-990c-7efd067f4463}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "0:2,1272:0,1274:534,0:536"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1277:549,1274:712,0:712,0:557"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -803.6888733412017,
                "y": -2863.8565182526486
            }
        },
        {
            "id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "model": {
                "camId": "4475",
                "data": {
                    "4475": "rtsp://admin:123456@10.36.8.20:554/video2",
                    "6209": "rtsp://admin:123456@10.36.8.21:554/video2",
                    "913": "rtsp://admin:123456@10.36.8.19:554/video2"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1084.6866439569549,
                "y": -2865.815659224417
            }
        },
        {
            "id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -505.7477031209503,
                "y": -4034.026581938763
            }
        },
        {
            "id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1340.018538119457,
                "y": -2849.2287335261362
            }
        },
        {
            "id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1339.9932111194587,
                "y": -4016.7171292261432
            }
        },
        {
            "id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1546.7802710149906,
                "y": -2571.677109053734
            }
        },
        {
            "id": "{8525c24c-c2a3-4997-815e-c4c289a63dd9}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "0:2,1272:0,1274:534,0:536"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1277:549,1274:712,0:712,0:557"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -802.0030112166263,
                "y": -4040.004459107428
            }
        },
        {
            "id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1546.7549440149924,
                "y": -3739.1655047537406
            }
        },
        {
            "id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1347.599047638457,
                "y": -1685.179469218396
            }
        },
        {
            "id": "{6e2e7bd0-abae-4f31-8b45-c2bf6a993d5f}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 148.75984052727313,
                "y": -2870.4975142818084
            }
        },
        {
            "id": "{7270da17-0484-4a33-aeb9-e8f81ec2fb22}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้า ILM ชั้น 2\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1293.418095027273,
                "y": -4244.54441474545
            }
        },
        {
            "id": "{8d1cf23d-64a1-45e1-ac4f-9294f4d8307b}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -85.33833571666753,
                "y": -3479.409799319495
            }
        },
        {
            "id": "{8af22562-d21e-4e35-84f8-c2bb93d8372a}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -265.8216209260131,
                "y": -1269.905001726444
            }
        },
        {
            "id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -650.9748227005873,
                "y": -2866.441370400743
            }
        },
        {
            "id": "{c8e96549-15a9-47a9-9fd6-4802bf51fb30}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -612.2604924170317,
                "y": -3751.495882028334
            }
        },
        {
            "id": "{b9afa0ea-1327-4521-b85b-d146053bbd27}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -54.592235716668256,
                "y": -2337.411799319498
            }
        },
        {
            "id": "{7b98cd23-df2a-47d2-9a0d-f120a9fe63f3}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -752.1764503896092,
                "y": -3751.1749992949476
            }
        },
        {
            "id": "{9d53b347-9e90-4557-b507-57c518c84aa6}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -179.16313509397682,
                "y": -2136.691803831619
            }
        },
        {
            "id": "{d68ec537-da7f-4bb8-8940-3ac4cd7c4228}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -249.6560209260133,
                "y": -2466.776501726445
            }
        },
        {
            "id": "{502c7ba6-fbfc-429b-a553-0ed9d98215ab}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -461.634571339237,
                "y": -1269.5476285278933
            }
        },
        {
            "id": "{3e61c803-814c-4f38-be41-2d2deaa4e52e}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -57.17750994657035,
                "y": -2466.499908055241
            }
        },
        {
            "id": "{aa214be4-80ff-440d-9aab-d78ae147f17e}",
            "model": {
                "data": {
                    "console": "",
                    "height": 359,
                    "js_code": "d = new Date()\nhour = d.getHours()\nsec = d.getSeconds()\n\n// time between 10AM and 9PM \nifelse = hour >= 10 && hour <= 20",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "splt0": 282,
                        "splt1": 71,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    },
                    "width": 322
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "check time",
                    "show": true
                }
            },
            "position": {
                "x": -1955.4868339139875,
                "y": -4018.7654637014675
            }
        },
        {
            "id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1632.2681326412114,
                "y": -4015.5427675705146
            }
        },
        {
            "id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1232.6598896318303,
                "y": -4032.712569940552
            }
        },
        {
            "id": "{828864d7-6f81-4bb9-92a1-d5cc6d2eca30}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -473.0084597689887,
                "y": -3751.309690511362
            }
        },
        {
            "id": "{3b11efa0-0a88-4a80-995e-f541e612d85a}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1144.9510127298508,
                "y": -2591.8722817961066
            }
        },
        {
            "id": "{62716a2c-d6b6-49db-9050-f7c90fcf3066}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2081.6667396581297,
                "y": -4018.4785980502184
            }
        },
        {
            "id": "{51692c0d-05f2-43eb-826d-afc1edd8022f}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1566.2681326412114,
                "y": -3577.5427675705146
            }
        },
        {
            "id": "{3e8bc090-ee42-4a29-9c59-006475873034}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 148.78516752727126,
                "y": -4037.9859099818154
            }
        },
        {
            "id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -658.5553322195876,
                "y": -1702.3921060930027
            }
        },
        {
            "id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -376.73534567501724,
                "y": -1706.4965962733934
            }
        },
        {
            "id": "{b7e92e18-6609-4c10-bcb1-8a0f77994257}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "start",
                    "show": true
                }
            },
            "position": {
                "x": -2220.20918894438,
                "y": -4019.448477156833
            }
        },
        {
            "id": "{851226a6-4fff-49d6-ac41-9ef57555026b}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai4",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer4"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai5",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer5"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai6",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer6"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 5000,
                    "roi_x": 90,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai4",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -940.4667371045323,
                "y": -4039.2943529558056
            }
        },
        {
            "id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -369.12950915601897,
                "y": -4038.03425628114
            }
        },
        {
            "id": "{73c0c048-e5e1-41bd-a76c-7c15c01b564a}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -250.83715903133498,
                "y": -2608.20222175923
            }
        },
        {
            "id": "{ab42ff59-6660-4b30-861e-822441bfe2fa}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -167.94342202727142,
                "y": -2872.2560190454433
            }
        },
        {
            "id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -505.7730301209485,
                "y": -2866.5381862387558
            }
        },
        {
            "id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -650.9494957005893,
                "y": -4033.92976610075
            }
        },
        {
            "id": "{552beefc-9874-482a-9de1-289740306897}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"6\"\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1516.599194375017,
                "y": -1684.5191620733933
            }
        },
        {
            "id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "model": {
                "camId": "913",
                "data": {
                    "4475": "rtsp://admin:123456@10.36.8.20:554/video2",
                    "6209": "rtsp://admin:123456@10.36.8.21:554/video2",
                    "913": "rtsp://admin:123456@10.36.8.19:554/video2"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1092.267153475955,
                "y": -1701.7663949166765
            }
        },
        {
            "id": "{3589081f-1a69-4b0c-842a-9e4c9493d4b8}",
            "model": {
                "name": "RelaySwitch",
                "relay_status": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2331.2636934181173,
                "y": -4003.0243258010487
            }
        },
        {
            "id": "{c057b6e7-e172-4ac1-bac6-6c7fe488321f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -108.25780810585081,
                "y": -3749.3175334865678
            }
        },
        {
            "id": "{c1a10095-7c80-4a62-a566-5ca6d0a157ae}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 141.1793310082729,
                "y": -1706.4482499740682
            }
        },
        {
            "id": "{5cb93eae-bfde-4e34-904c-7461c7a689d7}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -167.91809502727324,
                "y": -4039.7444147454503
            }
        },
        {
            "id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"5\"\n\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1509.018684856017,
                "y": -2848.5684263811336
            }
        },
        {
            "id": "{7c4d9cac-e468-4cf6-a352-94e892c140c3}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2593.4809430302475,
                "y": -2719.758673575473
            }
        },
        {
            "id": "{29a9022c-e980-4601-a630-9d72c99ed98d}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -597.6799924170323,
                "y": -1412.626382028337
            }
        },
        {
            "id": "{c3fc61c6-3096-480f-8721-e46c272215da}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1060.3473717285542,
                "y": -3751.9096515795923
            }
        },
        {
            "id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1639.8739691602098,
                "y": -1684.0051075627673
            }
        },
        {
            "id": "{407f428f-2ff1-4a7c-ba36-4c38c817d6cf}",
            "model": {
                "height": 111,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "var m = new Date();\n\nvar show_datestring =\n    m.getFullYear() + \"/\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"/\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"0\" + m.getSeconds()).slice(-2);\n    \nlabel = show_datestring",
                    "size": 19,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 23,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 293
            },
            "ngo": {
                "comment": {
                    "data": "just for show",
                    "show": true
                }
            },
            "position": {
                "x": -2279.4305352712136,
                "y": -2710.37150330022
            }
        },
        {
            "id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -369.1548361560171,
                "y": -2870.5458605811336
            }
        },
        {
            "id": "{41ecf3e4-5301-450c-9d65-2ddb5599c996}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -70.75783571666796,
                "y": -1140.540299319498
            }
        },
        {
            "id": "{481fc91e-2e07-4f0e-ab60-5b2b8214cb24}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้า ILM ชั้น 2\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1301.0239315462713,
                "y": -1913.0067547377032
            }
        },
        {
            "id": "{c6609cc5-06b2-45af-b2dd-87f7d3500493}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1248.1166127298507,
                "y": -1440.0007817961055
            }
        },
        {
            "id": "{9f8aed34-8322-4055-892b-939b54c495c7}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -458.42795976898924,
                "y": -1412.440190511365
            }
        },
        {
            "id": "{9bd6b15f-8836-452c-8577-86e8a4bea318}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -171.55729857497846,
                "y": -4468.229463839366
            }
        },
        {
            "id": "{73adcba7-0dea-48bf-88bc-765e2ba78098}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -87.92360994656963,
                "y": -3608.497908055238
            }
        },
        {
            "id": "{81e85025-d222-4116-bcaf-2c15d64e1c7a}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1231.9510127298508,
                "y": -2636.8722817961066
            }
        },
        {
            "id": "{2414d927-2fa5-4456-87f8-c3aae2d33b13}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "time",
                    "show": true
                }
            },
            "position": {
                "x": -2448.860341649587,
                "y": -2716.7353549690115
            }
        },
        {
            "id": "{d952503a-2180-410b-80d3-be2a8d487767}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -737.5959503896097,
                "y": -1412.3054992949506
            }
        },
        {
            "id": "{3cf576a6-c021-425e-929d-22ba8eeb3c2e}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -73.34310994657005,
                "y": -1269.628408055241
            }
        },
        {
            "id": "{1ecd17d4-3ae3-40e0-8429-558fe5f77f75}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 91.24216428333239,
                "y": -1359.540299319498
            }
        },
        {
            "id": "{27212482-7bee-43b4-bf04-721d11a1ab8f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -445.4689713392372,
                "y": -2466.4191285278944
            }
        },
        {
            "id": "{29f053d4-75df-4ec6-be4f-f414ff764a61}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 88.65689005342995,
                "y": -1488.628408055241
            }
        },
        {
            "id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1632.2934596412097,
                "y": -2848.0543718705076
            }
        },
        {
            "id": "{50db453f-68b5-4389-bb89-882fe0c09c8a}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1262.6971127298502,
                "y": -3778.8702817961025
            }
        },
        {
            "id": "{e03e4e42-6e2b-442f-a7d9-f68291a2e49c}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -267.0027590313348,
                "y": -1411.3307217592287
            }
        },
        {
            "id": "{505c22ad-7c09-4009-8a9a-709ab93f196e}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -890.8247229682243,
                "y": -1411.7982965150509
            }
        },
        {
            "id": "{f7cb7acd-59bd-4f35-9dbf-cc705b9cd3b4}",
            "model": {
                "height": 452,
                "name": "DebugGlobal",
                "payload_h": 0,
                "payload_v": 0,
                "width": 341
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2279.9622252640143,
                "y": -3265.414620337053
            }
        },
        {
            "id": "{ab8f33ae-2daf-4bc6-be57-4adb782634aa}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -175.52393154627165,
                "y": -1708.206754737703
            }
        },
        {
            "id": "{efa54390-cd04-4808-8dd7-9c1104188f6d}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้า ILM ชั้น 2\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1293.4434220272713,
                "y": -3077.0560190454435
            }
        },
        {
            "id": "{67cca78b-5dec-4afd-8526-2c80b3ab049d}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -281.58325903133425,
                "y": -3750.2002217592258
            }
        },
        {
            "id": "{20c1f477-b192-4f8d-a9f5-6ae4371fd887}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "0:2,1272:0,1274:534,0:536"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1277:549,1274:712,0:712,0:557"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -809.4313557857174,
                "y": -1702.722538128725
            }
        },
        {
            "id": "{b77d814d-40f9-4cbe-ab27-c92af9b565d9}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -721.4303503896099,
                "y": -2609.1769992949507
            }
        },
        {
            "id": "{99040bad-3773-412a-a8d4-a31b81dfc310}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai4",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer4"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai5",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer5"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai6",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer6"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 980,
                    "roi_x": 80,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai5",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -944.6955388525618,
                "y": -2864.6175735056954
            }
        }
    ],
    "scene_data": {
        "flow_view_pos_x": -1554.3555896300322,
        "flow_view_pos_y": -3834.2695466816713,
        "flow_view_zoom_factor": 0.6209213230591556
    }
}
