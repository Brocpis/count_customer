{
    "connections": [
        {
            "in_id": "{ce10f68b-748b-4053-ae8b-23bb437b8d78}",
            "in_index": 0,
            "out_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "out_index": 0
        },
        {
            "in_id": "{6f88371b-986c-4445-bd0d-f2e71a38f665}",
            "in_index": 0,
            "out_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "out_index": 0
        },
        {
            "in_id": "{c5717d04-8da8-4db9-ae55-c044703006b7}",
            "in_index": 0,
            "out_id": "{c1bfb688-885e-480e-910f-38a2694c78f0}",
            "out_index": 0
        },
        {
            "in_id": "{e03853f3-176f-41bb-9635-ee01779da730}",
            "in_index": 0,
            "out_id": "{a1ea08f9-3f12-4386-9cec-fb713e6bec45}",
            "out_index": 0
        },
        {
            "in_id": "{34cae6ec-06f5-4cd4-a947-500b43ded90d}",
            "in_index": 0,
            "out_id": "{1f87f9bf-3e8a-4f54-9610-b0fb5b25be92}",
            "out_index": 0
        },
        {
            "in_id": "{ff141005-7fc0-4c5f-a160-9125a1e7b156}",
            "in_index": 0,
            "out_id": "{6607acde-ea2e-48f1-9a9e-c0cfa6197165}",
            "out_index": 0
        },
        {
            "in_id": "{07b2af4c-4241-42cd-8ba4-6ae47b42661d}",
            "in_index": 0,
            "out_id": "{0061a782-7514-4f79-a488-6c2eb2331ba8}",
            "out_index": 0
        },
        {
            "in_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "in_index": 1,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "in_index": 0,
            "out_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "out_index": 0
        },
        {
            "in_id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{603b68f2-fde5-48f3-853a-3ea363c850fd}",
            "in_index": 0,
            "out_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "out_index": 0
        },
        {
            "in_id": "{c29ddb00-c8ea-4a4b-8bca-0aa100530178}",
            "in_index": 0,
            "out_id": "{c5717d04-8da8-4db9-ae55-c044703006b7}",
            "out_index": 0
        },
        {
            "in_id": "{e149b25f-ffb4-49de-81c1-90a00b6348ea}",
            "in_index": 1,
            "out_id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "out_index": 0
        },
        {
            "in_id": "{7270da17-0484-4a33-aeb9-e8f81ec2fb22}",
            "in_index": 0,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{503599a2-3cb7-460e-b8fa-a4a30858e056}",
            "in_index": 0,
            "out_id": "{ec28d835-0891-40a5-a31c-38ec901e4478}",
            "out_index": 0
        },
        {
            "in_id": "{6607acde-ea2e-48f1-9a9e-c0cfa6197165}",
            "in_index": 0,
            "out_id": "{3b908350-0945-46f2-a3e8-a215400c498f}",
            "out_index": 0
        },
        {
            "in_id": "{361d15b1-5bcd-4fb2-9a55-71d605a509d3}",
            "in_index": 0,
            "out_id": "{67dde7be-36ef-41e5-ae13-f387401ec1b0}",
            "out_index": 0
        },
        {
            "in_id": "{beb9e040-25b9-4fb4-b8ce-f2b4dbb85f6e}",
            "in_index": 0,
            "out_id": "{838a0500-5bb9-4bc2-a700-37ea789b4229}",
            "out_index": 0
        },
        {
            "in_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "in_index": 0,
            "out_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "out_index": 0
        },
        {
            "in_id": "{0ada270b-2eb4-41b4-bd3f-081af68d377a}",
            "in_index": 0,
            "out_id": "{5d25f408-286b-4e45-a1e9-8de91a0ea4f0}",
            "out_index": 0
        },
        {
            "in_id": "{9d53b347-9e90-4557-b507-57c518c84aa6}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{481fc91e-2e07-4f0e-ab60-5b2b8214cb24}",
            "in_index": 0,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{5d25f408-286b-4e45-a1e9-8de91a0ea4f0}",
            "in_index": 0,
            "out_id": "{1025c25e-2141-4a98-9e6e-ae846438b432}",
            "out_index": 0
        },
        {
            "in_id": "{c5462ff0-80c9-4bb2-a8a7-9c41b74824e0}",
            "in_index": 0,
            "out_id": "{6fc1c1f2-0673-49d0-a053-a36fe4c81762}",
            "out_index": 0
        },
        {
            "in_id": "{c864e2d7-75a4-4c9e-b0ec-caea742413cc}",
            "in_index": 0,
            "out_id": "{ff141005-7fc0-4c5f-a160-9125a1e7b156}",
            "out_index": 0
        },
        {
            "in_id": "{88152a62-a488-469c-a534-77b62694e04f}",
            "in_index": 0,
            "out_id": "{dd091f4a-1d31-4957-bf4d-232ffe182f6e}",
            "out_index": 0
        },
        {
            "in_id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "in_index": 0,
            "out_id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "out_index": 0
        },
        {
            "in_id": "{67dde7be-36ef-41e5-ae13-f387401ec1b0}",
            "in_index": 0,
            "out_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "out_index": 0
        },
        {
            "in_id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "in_index": 0,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{fef12736-6171-4a9d-9d8d-b8560bf34bd4}",
            "in_index": 0,
            "out_id": "{05d52d0f-c6ec-49a7-97f5-b24bdab59310}",
            "out_index": 0
        },
        {
            "in_id": "{552beefc-9874-482a-9de1-289740306897}",
            "in_index": 0,
            "out_id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "out_index": 0
        },
        {
            "in_id": "{45cc7b29-2e44-4bc4-a564-5ade4154d02e}",
            "in_index": 0,
            "out_id": "{30759ce3-6aad-4fde-a980-45c55a2067ac}",
            "out_index": 0
        },
        {
            "in_id": "{a1ea08f9-3f12-4386-9cec-fb713e6bec45}",
            "in_index": 0,
            "out_id": "{5ae5b9ac-9790-4204-a8ec-74e2b4e7fa30}",
            "out_index": 0
        },
        {
            "in_id": "{6e2e7bd0-abae-4f31-8b45-c2bf6a993d5f}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{82a4f738-03c4-44e3-8b13-8f8eaa81f6f0}",
            "in_index": 0,
            "out_id": "{c5717d04-8da8-4db9-ae55-c044703006b7}",
            "out_index": 0
        },
        {
            "in_id": "{99656726-2432-4b52-be54-86e7d9467284}",
            "in_index": 0,
            "out_id": "{7feeb712-760d-4f77-a3d1-c4bfbb139b64}",
            "out_index": 0
        },
        {
            "in_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "in_index": 0,
            "out_id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "out_index": 0
        },
        {
            "in_id": "{7ff9e895-1a2a-4842-9873-6fc7d828df44}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "in_index": 0,
            "out_id": "{a0260255-cf2b-4968-806f-7c586bc084e4}",
            "out_index": 0
        },
        {
            "in_id": "{6f8ba05e-e2c2-47e2-8dbe-ba1b39755ebc}",
            "in_index": 0,
            "out_id": "{dd091f4a-1d31-4957-bf4d-232ffe182f6e}",
            "out_index": 0
        },
        {
            "in_id": "{45cc7b29-2e44-4bc4-a564-5ade4154d02e}",
            "in_index": 1,
            "out_id": "{30759ce3-6aad-4fde-a980-45c55a2067ac}",
            "out_index": 1
        },
        {
            "in_id": "{de6bcbab-4894-4f99-9f2d-53505bcaf36b}",
            "in_index": 0,
            "out_id": "{a96d81cd-9067-4cc3-98ea-c5b04c2ca6ac}",
            "out_index": 0
        },
        {
            "in_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "in_index": 0,
            "out_id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "out_index": 0
        },
        {
            "in_id": "{6600479d-c612-4a91-8a18-66fba42d4ace}",
            "in_index": 0,
            "out_id": "{c5462ff0-80c9-4bb2-a8a7-9c41b74824e0}",
            "out_index": 0
        },
        {
            "in_id": "{72cb0e71-e17d-4593-945f-a17bc5faf5ba}",
            "in_index": 0,
            "out_id": "{99656726-2432-4b52-be54-86e7d9467284}",
            "out_index": 0
        },
        {
            "in_id": "{a0260255-cf2b-4968-806f-7c586bc084e4}",
            "in_index": 0,
            "out_id": "{691d0a22-14c8-41fe-9fd5-d46b073102d3}",
            "out_index": 0
        },
        {
            "in_id": "{100ab6ee-7138-4b8f-9988-91a13c04f65b}",
            "in_index": 0,
            "out_id": "{0b1a2f03-01e7-4d94-8c65-6eb3135d9cd9}",
            "out_index": 0
        },
        {
            "in_id": "{3e8bc090-ee42-4a29-9c59-006475873034}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{05d52d0f-c6ec-49a7-97f5-b24bdab59310}",
            "in_index": 1,
            "out_id": "{c5462ff0-80c9-4bb2-a8a7-9c41b74824e0}",
            "out_index": 1
        },
        {
            "in_id": "{beb9e040-25b9-4fb4-b8ce-f2b4dbb85f6e}",
            "in_index": 1,
            "out_id": "{838a0500-5bb9-4bc2-a700-37ea789b4229}",
            "out_index": 1
        },
        {
            "in_id": "{c5bf12bc-9673-4443-92b3-436fb1b8c18c}",
            "in_index": 0,
            "out_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "out_index": 0
        },
        {
            "in_id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "in_index": 0,
            "out_id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "out_index": 0
        },
        {
            "in_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "in_index": 0,
            "out_id": "{c864e2d7-75a4-4c9e-b0ec-caea742413cc}",
            "out_index": 0
        },
        {
            "in_id": "{f115db2c-b90d-4da4-a5c0-03f546b238ca}",
            "in_index": 0,
            "out_id": "{0061a782-7514-4f79-a488-6c2eb2331ba8}",
            "out_index": 0
        },
        {
            "in_id": "{22914387-0597-445c-96f6-201e881c325d}",
            "in_index": 0,
            "out_id": "{e149b25f-ffb4-49de-81c1-90a00b6348ea}",
            "out_index": 0
        },
        {
            "in_id": "{941d2a68-1001-49bc-b2cf-c957055be9e6}",
            "in_index": 0,
            "out_id": "{a1ea08f9-3f12-4386-9cec-fb713e6bec45}",
            "out_index": 0
        },
        {
            "in_id": "{3b908350-0945-46f2-a3e8-a215400c498f}",
            "in_index": 0,
            "out_id": "{c864e2d7-75a4-4c9e-b0ec-caea742413cc}",
            "out_index": 1
        },
        {
            "in_id": "{1f87f9bf-3e8a-4f54-9610-b0fb5b25be92}",
            "in_index": 0,
            "out_id": "{0ada270b-2eb4-41b4-bd3f-081af68d377a}",
            "out_index": 0
        },
        {
            "in_id": "{2fd8b25b-a6c0-4580-bec4-b110fc7067b4}",
            "in_index": 0,
            "out_id": "{87d013d7-40a5-4df0-8c7a-fa2d1402aceb}",
            "out_index": 0
        },
        {
            "in_id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "in_index": 0,
            "out_id": "{361d15b1-5bcd-4fb2-9a55-71d605a509d3}",
            "out_index": 0
        },
        {
            "in_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "in_index": 1,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{3b908350-0945-46f2-a3e8-a215400c498f}",
            "in_index": 1,
            "out_id": "{c864e2d7-75a4-4c9e-b0ec-caea742413cc}",
            "out_index": 0
        },
        {
            "in_id": "{dd091f4a-1d31-4957-bf4d-232ffe182f6e}",
            "in_index": 0,
            "out_id": "{de6bcbab-4894-4f99-9f2d-53505bcaf36b}",
            "out_index": 0
        },
        {
            "in_id": "{87d013d7-40a5-4df0-8c7a-fa2d1402aceb}",
            "in_index": 0,
            "out_id": "{99656726-2432-4b52-be54-86e7d9467284}",
            "out_index": 1
        },
        {
            "in_id": "{9bd6b15f-8836-452c-8577-86e8a4bea318}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{a96d81cd-9067-4cc3-98ea-c5b04c2ca6ac}",
            "in_index": 0,
            "out_id": "{17af05c1-b948-4a5f-b3cd-0a2bdd1537a7}",
            "out_index": 0
        },
        {
            "in_id": "{7feeb712-760d-4f77-a3d1-c4bfbb139b64}",
            "in_index": 0,
            "out_id": "{838a0500-5bb9-4bc2-a700-37ea789b4229}",
            "out_index": 0
        },
        {
            "in_id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "in_index": 0,
            "out_id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "out_index": 0
        },
        {
            "in_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "in_index": 0,
            "out_id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "out_index": 0
        },
        {
            "in_id": "{838a0500-5bb9-4bc2-a700-37ea789b4229}",
            "in_index": 0,
            "out_id": "{22914387-0597-445c-96f6-201e881c325d}",
            "out_index": 0
        },
        {
            "in_id": "{c1a10095-7c80-4a62-a566-5ca6d0a157ae}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "in_index": 0,
            "out_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "out_index": 0
        },
        {
            "in_id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "in_index": 0,
            "out_id": "{b7bb3d8e-5d7e-4c97-8928-e2fd01d3cd6b}",
            "out_index": 0
        },
        {
            "in_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "in_index": 0,
            "out_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "out_index": 0
        },
        {
            "in_id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "in_index": 0,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{a459ea66-b5f7-41aa-9901-a73dd903d30d}",
            "in_index": 0,
            "out_id": "{5d25f408-286b-4e45-a1e9-8de91a0ea4f0}",
            "out_index": 1
        },
        {
            "in_id": "{c47de9e6-5aca-4267-8d7b-bb91415a6dfb}",
            "in_index": 0,
            "out_id": "{2fd8b25b-a6c0-4580-bec4-b110fc7067b4}",
            "out_index": 0
        },
        {
            "in_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "in_index": 0,
            "out_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "out_index": 0
        },
        {
            "in_id": "{61f3e5c4-3b71-424f-8aad-9008edb33bd2}",
            "in_index": 0,
            "out_id": "{2fd8b25b-a6c0-4580-bec4-b110fc7067b4}",
            "out_index": 0
        },
        {
            "in_id": "{1f41e951-3058-4395-89cb-f1de8645b37c}",
            "in_index": 0,
            "out_id": "{0b1a2f03-01e7-4d94-8c65-6eb3135d9cd9}",
            "out_index": 0
        },
        {
            "in_id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{ec28d835-0891-40a5-a31c-38ec901e4478}",
            "in_index": 0,
            "out_id": "{45cc7b29-2e44-4bc4-a564-5ade4154d02e}",
            "out_index": 0
        },
        {
            "in_id": "{e149b25f-ffb4-49de-81c1-90a00b6348ea}",
            "in_index": 0,
            "out_id": "{beb9e040-25b9-4fb4-b8ce-f2b4dbb85f6e}",
            "out_index": 0
        },
        {
            "in_id": "{efa54390-cd04-4808-8dd7-9c1104188f6d}",
            "in_index": 0,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{c1bfb688-885e-480e-910f-38a2694c78f0}",
            "in_index": 0,
            "out_id": "{17af05c1-b948-4a5f-b3cd-0a2bdd1537a7}",
            "out_index": 1
        },
        {
            "in_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "in_index": 0,
            "out_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "out_index": 0
        },
        {
            "in_id": "{ec28d835-0891-40a5-a31c-38ec901e4478}",
            "in_index": 1,
            "out_id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "out_index": 0
        },
        {
            "in_id": "{05d52d0f-c6ec-49a7-97f5-b24bdab59310}",
            "in_index": 0,
            "out_id": "{c5462ff0-80c9-4bb2-a8a7-9c41b74824e0}",
            "out_index": 0
        },
        {
            "in_id": "{5ae5b9ac-9790-4204-a8ec-74e2b4e7fa30}",
            "in_index": 0,
            "out_id": "{72cb0e71-e17d-4593-945f-a17bc5faf5ba}",
            "out_index": 0
        },
        {
            "in_id": "{0b1a2f03-01e7-4d94-8c65-6eb3135d9cd9}",
            "in_index": 0,
            "out_id": "{100ab6ee-7138-4b8f-9988-91a13c04f65b}",
            "out_index": 0
        },
        {
            "in_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "in_index": 0,
            "out_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "out_index": 0
        },
        {
            "in_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "in_index": 0,
            "out_id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "out_index": 0
        },
        {
            "in_id": "{17af05c1-b948-4a5f-b3cd-0a2bdd1537a7}",
            "in_index": 0,
            "out_id": "{6600479d-c612-4a91-8a18-66fba42d4ace}",
            "out_index": 0
        },
        {
            "in_id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{1025c25e-2141-4a98-9e6e-ae846438b432}",
            "in_index": 0,
            "out_id": "{30759ce3-6aad-4fde-a980-45c55a2067ac}",
            "out_index": 0
        },
        {
            "in_id": "{ab42ff59-6660-4b30-861e-822441bfe2fa}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "in_index": 0,
            "out_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "out_index": 0
        },
        {
            "in_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "in_index": 0,
            "out_id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "out_index": 0
        },
        {
            "in_id": "{ab8f33ae-2daf-4bc6-be57-4adb782634aa}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "in_index": 0,
            "out_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "out_index": 0
        },
        {
            "in_id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "in_index": 0,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "in_index": 1,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{fef12736-6171-4a9d-9d8d-b8560bf34bd4}",
            "in_index": 1,
            "out_id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "out_index": 0
        },
        {
            "in_id": "{b7bb3d8e-5d7e-4c97-8928-e2fd01d3cd6b}",
            "in_index": 0,
            "out_id": "{603b68f2-fde5-48f3-853a-3ea363c850fd}",
            "out_index": 0
        },
        {
            "in_id": "{0061a782-7514-4f79-a488-6c2eb2331ba8}",
            "in_index": 0,
            "out_id": "{a459ea66-b5f7-41aa-9901-a73dd903d30d}",
            "out_index": 0
        },
        {
            "in_id": "{6fc1c1f2-0673-49d0-a053-a36fe4c81762}",
            "in_index": 0,
            "out_id": "{fef12736-6171-4a9d-9d8d-b8560bf34bd4}",
            "out_index": 0
        },
        {
            "in_id": "{e4546106-979a-4d57-b7b1-29bb113ef30e}",
            "in_index": 0,
            "out_id": "{34cae6ec-06f5-4cd4-a947-500b43ded90d}",
            "out_index": 0
        },
        {
            "in_id": "{691d0a22-14c8-41fe-9fd5-d46b073102d3}",
            "in_index": 0,
            "out_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "out_index": 0
        },
        {
            "in_id": "{37dd8483-f44c-44fa-be51-0285a1b4699a}",
            "in_index": 0,
            "out_id": "{34cae6ec-06f5-4cd4-a947-500b43ded90d}",
            "out_index": 0
        },
        {
            "in_id": "{30759ce3-6aad-4fde-a980-45c55a2067ac}",
            "in_index": 0,
            "out_id": "{503599a2-3cb7-460e-b8fa-a4a30858e056}",
            "out_index": 0
        },
        {
            "in_id": "{5cb93eae-bfde-4e34-904c-7461c7a689d7}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        }
    ],
    "nodes": [
        {
            "id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1632.2934596412097,
                "y": -2848.0543718705076
            }
        },
        {
            "id": "{ec28d835-0891-40a5-a31c-38ec901e4478}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1198.7881343958516,
                "y": -3747.1022227571043
            }
        },
        {
            "id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1240.2657261508286,
                "y": -1701.1749099328047
            }
        },
        {
            "id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1232.6852166318286,
                "y": -2865.224174240545
            }
        },
        {
            "id": "{7feeb712-760d-4f77-a3d1-c4bfbb139b64}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -759.1623720556106,
                "y": -1397.3565402559516
            }
        },
        {
            "id": "{87d013d7-40a5-4df0-8c7a-fa2d1402aceb}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -483.20099300523793,
                "y": -1254.5986694888934
            }
        },
        {
            "id": "{6fc1c1f2-0673-49d0-a053-a36fe4c81762}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1052.6922933945557,
                "y": -2626.6041925405966
            }
        },
        {
            "id": "{37dd8483-f44c-44fa-be51-0285a1b4699a}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 53.57064261733103,
                "y": -3711.6417402804977
            }
        },
        {
            "id": "{9d53b347-9e90-4557-b507-57c518c84aa6}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -179.16313509397682,
                "y": -2136.691803831619
            }
        },
        {
            "id": "{5ae5b9ac-9790-4204-a8ec-74e2b4e7fa30}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -288.56918069733615,
                "y": -1396.3817627202307
            }
        },
        {
            "id": "{a459ea66-b5f7-41aa-9901-a73dd903d30d}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -499.3060930052379,
                "y": -3621.649069488892
            }
        },
        {
            "id": "{c47de9e6-5aca-4267-8d7b-bb91415a6dfb}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -94.90953161257107,
                "y": -1254.679449016242
            }
        },
        {
            "id": "{05d52d0f-c6ec-49a7-97f5-b24bdab59310}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1255.0420343958517,
                "y": -2653.564822757105
            }
        },
        {
            "id": "{6f8ba05e-e2c2-47e2-8dbe-ba1b39755ebc}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 84.3167426173311,
                "y": -2573.1043402804985
            }
        },
        {
            "id": "{1025c25e-2141-4a98-9e6e-ae846438b432}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -775.2674720556106,
                "y": -3764.4069402559503
            }
        },
        {
            "id": "{838a0500-5bb9-4bc2-a700-37ea789b4229}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -912.3911446342252,
                "y": -1396.849337476052
            }
        },
        {
            "id": "{fef12736-6171-4a9d-9d8d-b8560bf34bd4}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1168.0420343958517,
                "y": -2608.564822757105
            }
        },
        {
            "id": "{17af05c1-b948-4a5f-b3cd-0a2bdd1537a7}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -604.6054140830332,
                "y": -2626.1904229893385
            }
        },
        {
            "id": "{c5462ff0-80c9-4bb2-a8a7-9c41b74824e0}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -897.7501446342252,
                "y": -2625.3623374760514
            }
        },
        {
            "id": "{88152a62-a488-469c-a534-77b62694e04f}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 81.731468387429,
                "y": -2702.1924490162414
            }
        },
        {
            "id": "{07b2af4c-4241-42cd-8ba4-6ae47b42661d}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -111.01463161257107,
                "y": -3621.7298490162407
            }
        },
        {
            "id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1347.599047638457,
                "y": -1685.179469218396
            }
        },
        {
            "id": "{b7bb3d8e-5d7e-4c97-8928-e2fd01d3cd6b}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "0:0,1272:0,1272:280,955:231,321:205,2:244"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1277:301,963:265,321:242,0:250,5:717,1274:712"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -801.1177430054316,
                "y": -4031.94792270598
            }
        },
        {
            "id": "{7ff9e895-1a2a-4842-9873-6fc7d828df44}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -171.5826255749766,
                "y": -3300.7410681393594
            }
        },
        {
            "id": "{beb9e040-25b9-4fb4-b8ce-f2b4dbb85f6e}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1269.6830343958516,
                "y": -1425.0518227571056
            }
        },
        {
            "id": "{0b1a2f03-01e7-4d94-8c65-6eb3135d9cd9}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "time",
                    "show": true
                }
            },
            "position": {
                "x": -2461.0443263075867,
                "y": -2727.8288815620126
            }
        },
        {
            "id": "{c1bfb688-885e-480e-910f-38a2694c78f0}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -468.55999300523797,
                "y": -2483.111669488893
            }
        },
        {
            "id": "{22914387-0597-445c-96f6-201e881c325d}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1067.3332933945555,
                "y": -1398.0911925405971
            }
        },
        {
            "id": "{f115db2c-b90d-4da4-a5c0-03f546b238ca}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -108.42935738266897,
                "y": -3492.6417402804977
            }
        },
        {
            "id": "{361d15b1-5bcd-4fb2-9a55-71d605a509d3}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "1272:240,983:201,798:178,365:165,221:196,5:103,5:0,1272:7"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "2:113,226:216,849:214,1035:247,1277:286,1274:712,5:712"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -801.8645691010811,
                "y": -2864.69889931215
            }
        },
        {
            "id": "{efa54390-cd04-4808-8dd7-9c1104188f6d}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้าชั้นใต้ดินฝั่งลิฟต์\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1293.4434220272713,
                "y": -3077.0560190454435
            }
        },
        {
            "id": "{a0260255-cf2b-4968-806f-7c586bc084e4}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "1:135,0:1,1272:1,1273:255,950:206,427:188,193:209"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1274:263,952:219,424:216,190:216,0:149,2:712,1272:712"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -814.2063973951183,
                "y": -1707.4118319094748
            }
        },
        {
            "id": "{c1a10095-7c80-4a62-a566-5ca6d0a157ae}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 141.1793310082729,
                "y": -1706.4482499740682
            }
        },
        {
            "id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"120\"\n\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1509.018684856017,
                "y": -2848.5684263811336
            }
        },
        {
            "id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -369.12950915601897,
                "y": -4038.03425628114
            }
        },
        {
            "id": "{ab42ff59-6660-4b30-861e-822441bfe2fa}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -167.94342202727142,
                "y": -2872.2560190454433
            }
        },
        {
            "id": "{de6bcbab-4894-4f99-9f2d-53505bcaf36b}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -273.9281806973362,
                "y": -2624.89476272023
            }
        },
        {
            "id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1639.8739691602098,
                "y": -1684.0051075627673
            }
        },
        {
            "id": "{6e2e7bd0-abae-4f31-8b45-c2bf6a993d5f}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 148.75984052727313,
                "y": -2870.4975142818084
            }
        },
        {
            "id": "{30759ce3-6aad-4fde-a980-45c55a2067ac}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -928.4962446342251,
                "y": -3763.8997374760506
            }
        },
        {
            "id": "{5d25f408-286b-4e45-a1e9-8de91a0ea4f0}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -635.3515140830332,
                "y": -3764.7278229893377
            }
        },
        {
            "id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -505.7730301209485,
                "y": -2866.5381862387558
            }
        },
        {
            "id": "{6607acde-ea2e-48f1-9a9e-c0cfa6197165}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "start",
                    "show": true
                }
            },
            "position": {
                "x": -2224.5808405890707,
                "y": -4018.3139774356523
            }
        },
        {
            "id": "{3e8bc090-ee42-4a29-9c59-006475873034}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 148.78516752727126,
                "y": -4037.9859099818154
            }
        },
        {
            "id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1632.2681326412114,
                "y": -4015.5427675705146
            }
        },
        {
            "id": "{503599a2-3cb7-460e-b8fa-a4a30858e056}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1083.4383933945555,
                "y": -3765.141592540596
            }
        },
        {
            "id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "model": {
                "camId": "9287",
                "data": {
                    "4335": "rtsp://admin:123456@10.36.8.12:554/video2",
                    "6758": "rtsp://admin:123456@10.36.8.13:554/video2",
                    "9287": "rtsp://admin:123456@10.36.8.11:554/video2"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1084.6613169569566,
                "y": -4033.304054924424
            }
        },
        {
            "id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "model": {
                "delay_time": 2000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "make sure value",
                    "show": true
                }
            },
            "position": {
                "x": -1814,
                "y": -4017
            }
        },
        {
            "id": "{ff141005-7fc0-4c5f-a160-9125a1e7b156}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2086.0383913028213,
                "y": -4017.3440983290375
            }
        },
        {
            "id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -658.5553322195876,
                "y": -1702.3921060930027
            }
        },
        {
            "id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1232.6598896318303,
                "y": -4032.712569940552
            }
        },
        {
            "id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -650.9494957005893,
                "y": -4033.92976610075
            }
        },
        {
            "id": "{552beefc-9874-482a-9de1-289740306897}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"121\"\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1516.599194375017,
                "y": -1684.5191620733933
            }
        },
        {
            "id": "{100ab6ee-7138-4b8f-9988-91a13c04f65b}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2605.664927688249,
                "y": -2730.852200168474
            }
        },
        {
            "id": "{a1ea08f9-3f12-4386-9cec-fb713e6bec45}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -115.24372977185226,
                "y": -1395.4990744475717
            }
        },
        {
            "id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -376.73534567501724,
                "y": -1706.4965962733934
            }
        },
        {
            "id": "{c864e2d7-75a4-4c9e-b0ec-caea742413cc}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nsec = d.getSeconds()\n\n// time between 10AM and 9PM \nifelse = hour >= 10 && hour <= 20",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "check time",
                    "show": true
                }
            },
            "position": {
                "x": -1959.8584855586791,
                "y": -4017.6309639802867
            }
        },
        {
            "id": "{82a4f738-03c4-44e3-8b13-8f8eaa81f6f0}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -80.26853161257111,
                "y": -2483.1924490162414
            }
        },
        {
            "id": "{2fd8b25b-a6c0-4580-bec4-b110fc7067b4}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -287.388042592014,
                "y": -1254.956042687444
            }
        },
        {
            "id": "{e03853f3-176f-41bb-9635-ee01779da730}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 67.09046838742893,
                "y": -1473.679449016242
            }
        },
        {
            "id": "{72cb0e71-e17d-4593-945f-a17bc5faf5ba}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -479.9943814349906,
                "y": -1397.491231472367
            }
        },
        {
            "id": "{f7cb7acd-59bd-4f35-9dbf-cc705b9cd3b4}",
            "model": {
                "height": 452,
                "name": "DebugGlobal",
                "payload_h": 0,
                "payload_v": 0,
                "width": 341
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2279.9622252640143,
                "y": -3265.414620337053
            }
        },
        {
            "id": "{99656726-2432-4b52-be54-86e7d9467284}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -619.2464140830332,
                "y": -1397.677422989339
            }
        },
        {
            "id": "{a96d81cd-9067-4cc3-98ea-c5b04c2ca6ac}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -465.35338143499064,
                "y": -2626.0042314723664
            }
        },
        {
            "id": "{34cae6ec-06f5-4cd4-a947-500b43ded90d}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -131.34882977185225,
                "y": -3762.5494744475704
            }
        },
        {
            "id": "{0ada270b-2eb4-41b4-bd3f-081af68d377a}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -496.0994814349906,
                "y": -3764.5416314723657
            }
        },
        {
            "id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1546.7549440149924,
                "y": -3739.1655047537406
            }
        },
        {
            "id": "{c5bf12bc-9673-4443-92b3-436fb1b8c18c}",
            "model": {
                "data": {
                    "auto_save": false,
                    "jpg": false,
                    "name": "121",
                    "path": "/home/ilm/Desktop/count_customer/resource/master",
                    "png": true,
                    "use_custom_name": true,
                    "use_fixed_name": true,
                    "use_payload_name": false
                },
                "name": "ImageCapture",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -916.8257564169993,
                "y": -1841.893569996998
            }
        },
        {
            "id": "{e149b25f-ffb4-49de-81c1-90a00b6348ea}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1182.6830343958516,
                "y": -1380.0518227571056
            }
        },
        {
            "id": "{6f88371b-986c-4445-bd0d-f2e71a38f665}",
            "model": {
                "data": {
                    "auto_save": false,
                    "jpg": false,
                    "name": "119",
                    "path": "/home/ilm/Desktop/count_customer/resource/master",
                    "png": true,
                    "use_custom_name": true,
                    "use_fixed_name": true,
                    "use_payload_name": false
                },
                "name": "ImageCapture",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -912.5257564169999,
                "y": -4166.493569996999
            }
        },
        {
            "id": "{45cc7b29-2e44-4bc4-a564-5ade4154d02e}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1285.7881343958516,
                "y": -3792.1022227571043
            }
        },
        {
            "id": "{dd091f4a-1d31-4957-bf4d-232ffe182f6e}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -100.6027297718523,
                "y": -2624.012074447571
            }
        },
        {
            "id": "{e4546106-979a-4d57-b7b1-29bb113ef30e}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 50.985368387428935,
                "y": -3840.7298490162407
            }
        },
        {
            "id": "{c5717d04-8da8-4db9-ae55-c044703006b7}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -272.74704259201405,
                "y": -2483.4690426874436
            }
        },
        {
            "id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -650.9748227005873,
                "y": -2866.441370400743
            }
        },
        {
            "id": "{0061a782-7514-4f79-a488-6c2eb2331ba8}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -303.493142592014,
                "y": -3622.006442687443
            }
        },
        {
            "id": "{1f87f9bf-3e8a-4f54-9610-b0fb5b25be92}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -304.67428069733614,
                "y": -3763.4321627202294
            }
        },
        {
            "id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -369.1548361560171,
                "y": -2870.5458605811336
            }
        },
        {
            "id": "{603b68f2-fde5-48f3-853a-3ea363c850fd}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai7",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer7"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai8",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer8"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai9",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer9"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 5000,
                    "roi_x": 0,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai7",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -930.454374121134,
                "y": -4029.6993398630057
            }
        },
        {
            "id": "{481fc91e-2e07-4f0e-ab60-5b2b8214cb24}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้าด้านหน้า Lemon Farm\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1301.0239315462713,
                "y": -1913.0067547377032
            }
        },
        {
            "id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1554.3607805339907,
                "y": -1407.6278447459938
            }
        },
        {
            "id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -513.3535396399486,
                "y": -1702.4889219310155
            }
        },
        {
            "id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"119\"\n\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1508.9933578560187,
                "y": -4016.0568220811406
            }
        },
        {
            "id": "{ce10f68b-748b-4053-ae8b-23bb437b8d78}",
            "model": {
                "data": {
                    "auto_save": false,
                    "jpg": false,
                    "name": "120",
                    "path": "/home/ilm/Desktop/count_customer/resource/master",
                    "png": true,
                    "use_custom_name": true,
                    "use_fixed_name": true,
                    "use_payload_name": false
                },
                "name": "ImageCapture",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -922.3257564169993,
                "y": -3056.293569996996
            }
        },
        {
            "id": "{61f3e5c4-3b71-424f-8aad-9008edb33bd2}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -92.32425738266897,
                "y": -1125.5913402804986
            }
        },
        {
            "id": "{5cb93eae-bfde-4e34-904c-7461c7a689d7}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -167.91809502727324,
                "y": -4039.7444147454503
            }
        },
        {
            "id": "{691d0a22-14c8-41fe-9fd5-d46b073102d3}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai7",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer7"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai8",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer8"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai9",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer9"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 5000,
                    "roi_x": 0,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai9",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -949.9041855356132,
                "y": -1706.8261416284824
            }
        },
        {
            "id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "model": {
                "camId": "4335",
                "data": {
                    "4335": "rtsp://admin:123456@10.36.8.12:554/video2",
                    "6758": "rtsp://admin:123456@10.36.8.13:554/video2",
                    "9287": "rtsp://admin:123456@10.36.8.11:554/video2"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1084.6866439569549,
                "y": -2865.815659224417
            }
        },
        {
            "id": "{9bd6b15f-8836-452c-8577-86e8a4bea318}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -171.55729857497846,
                "y": -4468.229463839366
            }
        },
        {
            "id": "{7270da17-0484-4a33-aeb9-e8f81ec2fb22}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้าชั้นใต้ดินฝั่งบันไดเลื่อน\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1293.418095027273,
                "y": -4244.54441474545
            }
        },
        {
            "id": "{941d2a68-1001-49bc-b2cf-c957055be9e6}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 69.67574261733103,
                "y": -1344.591340280499
            }
        },
        {
            "id": "{c29ddb00-c8ea-4a4b-8bca-0aa100530178}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -77.68325738266901,
                "y": -2354.1043402804985
            }
        },
        {
            "id": "{3b908350-0945-46f2-a3e8-a215400c498f}",
            "model": {
                "name": "RelaySwitch",
                "relay_status": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2335.635345062808,
                "y": -4001.889826079868
            }
        },
        {
            "id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1546.7802710149906,
                "y": -2571.677109053734
            }
        },
        {
            "id": "{6600479d-c612-4a91-8a18-66fba42d4ace}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -744.5213720556106,
                "y": -2625.869540255951
            }
        },
        {
            "id": "{1f41e951-3058-4395-89cb-f1de8645b37c}",
            "model": {
                "height": 111,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "var m = new Date();\n\nvar show_datestring =\n    m.getFullYear() + \"/\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"/\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"0\" + m.getSeconds()).slice(-2);\n    \nlabel = show_datestring",
                    "size": 19,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 23,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 293
            },
            "ngo": {
                "comment": {
                    "data": "just for show",
                    "show": true
                }
            },
            "position": {
                "x": -2291.614519929215,
                "y": -2721.465029893221
            }
        },
        {
            "id": "{ab8f33ae-2daf-4bc6-be57-4adb782634aa}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -175.52393154627165,
                "y": -1708.206754737703
            }
        },
        {
            "id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "model": {
                "camId": "6758",
                "data": {
                    "4335": "rtsp://admin:123456@10.36.8.12:554/video2",
                    "6758": "rtsp://admin:123456@10.36.8.13:554/video2",
                    "9287": "rtsp://admin:123456@10.36.8.11:554/video2"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1092.267153475955,
                "y": -1701.7663949166765
            }
        },
        {
            "id": "{67dde7be-36ef-41e5-ae13-f387401ec1b0}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai7",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer7"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai8",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer8"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai9",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer9"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 5000,
                    "roi_x": 0,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai8",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -940.2921093076927,
                "y": -2869.8965974609114
            }
        },
        {
            "id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1340.018538119457,
                "y": -2849.2287335261362
            }
        },
        {
            "id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -505.7477031209503,
                "y": -4034.026581938763
            }
        },
        {
            "id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1339.9932111194587,
                "y": -4016.7171292261432
            }
        }
    ],
    "scene_data": {
        "flow_view_pos_x": -1106.4946517857445,
        "flow_view_pos_y": -2106.3975022640475,
        "flow_view_zoom_factor": 0.38554328942953164
    }
}
