{
    "connections": [
        {
            "in_id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "in_index": 0,
            "out_id": "{276e4bb9-0bd2-4acf-ace9-20f16d259778}",
            "out_index": 0
        },
        {
            "in_id": "{b45162d1-2aca-4dab-9bec-6ffed66668f6}",
            "in_index": 0,
            "out_id": "{dbb810ff-f010-4bf9-b11e-97d57d8bb594}",
            "out_index": 0
        },
        {
            "in_id": "{959d598b-8ec8-4e6f-84f0-7645f2bd23b7}",
            "in_index": 0,
            "out_id": "{c997d50b-5521-4341-ac0b-3098ee452161}",
            "out_index": 0
        },
        {
            "in_id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "in_index": 0,
            "out_id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "out_index": 0
        },
        {
            "in_id": "{481fc91e-2e07-4f0e-ab60-5b2b8214cb24}",
            "in_index": 0,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{a85fdc67-1c16-426e-9396-d68bfbee4056}",
            "in_index": 0,
            "out_id": "{896d57fd-a438-4dff-ba8a-49f526d4da46}",
            "out_index": 0
        },
        {
            "in_id": "{0601f0ca-4615-43bc-af5e-5557323e9a21}",
            "in_index": 1,
            "out_id": "{c26c197f-d213-4e2a-aa50-173783d23fd9}",
            "out_index": 1
        },
        {
            "in_id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "in_index": 0,
            "out_id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "out_index": 0
        },
        {
            "in_id": "{ab42ff59-6660-4b30-861e-822441bfe2fa}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{c1a10095-7c80-4a62-a566-5ca6d0a157ae}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{da386f9f-498e-4551-adf9-24c43f734610}",
            "in_index": 0,
            "out_id": "{28ffd5c4-8a80-4d45-bddc-fb80dfb14670}",
            "out_index": 1
        },
        {
            "in_id": "{e705180d-2162-43d4-9432-3b938539f7d7}",
            "in_index": 0,
            "out_id": "{648ac052-06dc-4689-a48f-bf5a19714ed0}",
            "out_index": 0
        },
        {
            "in_id": "{d4ecd395-8218-4327-b9e9-92c93c87ed24}",
            "in_index": 0,
            "out_id": "{15650b7a-6ac7-4499-8dc1-4d1a36f268d6}",
            "out_index": 0
        },
        {
            "in_id": "{a2cd7301-94da-4e3e-becf-5451b99fe991}",
            "in_index": 1,
            "out_id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "out_index": 0
        },
        {
            "in_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "in_index": 0,
            "out_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "out_index": 0
        },
        {
            "in_id": "{276e4bb9-0bd2-4acf-ace9-20f16d259778}",
            "in_index": 0,
            "out_id": "{d82067c6-ae74-4aae-837b-d8bf6efcf049}",
            "out_index": 0
        },
        {
            "in_id": "{d7cedd5d-7ac2-401c-a59c-31a5a01aaf33}",
            "in_index": 0,
            "out_id": "{a85fdc67-1c16-426e-9396-d68bfbee4056}",
            "out_index": 0
        },
        {
            "in_id": "{fa10d69d-319b-48e3-8f9f-c3f3ef023f0e}",
            "in_index": 0,
            "out_id": "{4764b25b-7810-4206-aa71-01cecad5391e}",
            "out_index": 0
        },
        {
            "in_id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "in_index": 0,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{01eb7b9c-c59b-4aa5-bc2b-ded517b68456}",
            "in_index": 0,
            "out_id": "{b1e12853-243f-44ed-8ddc-3f1c45cb34dd}",
            "out_index": 0
        },
        {
            "in_id": "{15499d79-dc9e-42f7-8485-4013799b5932}",
            "in_index": 0,
            "out_id": "{2a48b207-4f29-4acf-aedf-646ad6d62cd7}",
            "out_index": 0
        },
        {
            "in_id": "{932e5a76-e37e-44b7-883d-ea5830a22717}",
            "in_index": 0,
            "out_id": "{13c975ba-c529-48b7-8e03-d4806a6105af}",
            "out_index": 0
        },
        {
            "in_id": "{6f81d719-6c74-46b4-9869-beb7d246f68f}",
            "in_index": 0,
            "out_id": "{c06ff6a0-0850-4738-b862-756aa71afeb8}",
            "out_index": 0
        },
        {
            "in_id": "{a933cd40-8b6b-4776-8efb-d4b71ed4ff6f}",
            "in_index": 0,
            "out_id": "{00b5acf8-dab5-4b8e-9528-758dc33d4c94}",
            "out_index": 0
        },
        {
            "in_id": "{69403ad7-4523-4496-a2ba-2c8f54a80a06}",
            "in_index": 0,
            "out_id": "{00b5acf8-dab5-4b8e-9528-758dc33d4c94}",
            "out_index": 0
        },
        {
            "in_id": "{efa54390-cd04-4808-8dd7-9c1104188f6d}",
            "in_index": 0,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "in_index": 0,
            "out_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "out_index": 0
        },
        {
            "in_id": "{7511dcac-50ab-431f-b76b-41a0f595207a}",
            "in_index": 0,
            "out_id": "{59305234-5437-4cc3-b348-d5897a3b061d}",
            "out_index": 0
        },
        {
            "in_id": "{6e2e7bd0-abae-4f31-8b45-c2bf6a993d5f}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{286cf307-3b24-4f3e-af8f-93b59f4c3491}",
            "in_index": 1,
            "out_id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "out_index": 0
        },
        {
            "in_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "in_index": 0,
            "out_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "out_index": 0
        },
        {
            "in_id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "in_index": 0,
            "out_id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "out_index": 0
        },
        {
            "in_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "in_index": 1,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{48e114ca-e8ae-4004-b0b9-3784a9e73e95}",
            "in_index": 0,
            "out_id": "{e712aafb-ba82-4b43-83b0-a19eba121416}",
            "out_index": 0
        },
        {
            "in_id": "{c0c0dd56-ab12-43a5-b619-0e9fb35e8809}",
            "in_index": 0,
            "out_id": "{c92bbdec-9605-4a25-aacb-ef9ae264a13b}",
            "out_index": 0
        },
        {
            "in_id": "{2113d865-e25f-48e7-b9e3-804700acfa30}",
            "in_index": 0,
            "out_id": "{c06ff6a0-0850-4738-b862-756aa71afeb8}",
            "out_index": 0
        },
        {
            "in_id": "{4764b25b-7810-4206-aa71-01cecad5391e}",
            "in_index": 0,
            "out_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "out_index": 0
        },
        {
            "in_id": "{0601f0ca-4615-43bc-af5e-5557323e9a21}",
            "in_index": 0,
            "out_id": "{c26c197f-d213-4e2a-aa50-173783d23fd9}",
            "out_index": 0
        },
        {
            "in_id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{800bdeee-4198-4e00-bab3-8590dfeaf892}",
            "in_index": 0,
            "out_id": "{c92bbdec-9605-4a25-aacb-ef9ae264a13b}",
            "out_index": 0
        },
        {
            "in_id": "{16a37bba-4f8e-4b75-94b0-ca1343229f0b}",
            "in_index": 0,
            "out_id": "{959d598b-8ec8-4e6f-84f0-7645f2bd23b7}",
            "out_index": 1
        },
        {
            "in_id": "{a9fd0043-cec8-4363-8e34-bb969ffb9133}",
            "in_index": 1,
            "out_id": "{48e114ca-e8ae-4004-b0b9-3784a9e73e95}",
            "out_index": 1
        },
        {
            "in_id": "{15650b7a-6ac7-4499-8dc1-4d1a36f268d6}",
            "in_index": 0,
            "out_id": "{85178dd2-b9ab-4526-b73d-2b85de6e8c53}",
            "out_index": 0
        },
        {
            "in_id": "{9d53b347-9e90-4557-b507-57c518c84aa6}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "in_index": 0,
            "out_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "out_index": 0
        },
        {
            "in_id": "{482521e4-be6a-44c0-b17f-8798da70be7d}",
            "in_index": 0,
            "out_id": "{a85fdc67-1c16-426e-9396-d68bfbee4056}",
            "out_index": 1
        },
        {
            "in_id": "{b1e12853-243f-44ed-8ddc-3f1c45cb34dd}",
            "in_index": 0,
            "out_id": "{d96510f6-c117-47ea-b2ab-149e1d72ac52}",
            "out_index": 0
        },
        {
            "in_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "in_index": 1,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "in_index": 0,
            "out_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "out_index": 0
        },
        {
            "in_id": "{e747ed84-2854-4f6c-b1a6-7ce5c55a0a2a}",
            "in_index": 0,
            "out_id": "{15650b7a-6ac7-4499-8dc1-4d1a36f268d6}",
            "out_index": 0
        },
        {
            "in_id": "{28ffd5c4-8a80-4d45-bddc-fb80dfb14670}",
            "in_index": 0,
            "out_id": "{103280e8-e3c3-4bd5-8eee-6f14ffa7821e}",
            "out_index": 0
        },
        {
            "in_id": "{5355a79a-1a87-49cf-a17d-f834b2058a98}",
            "in_index": 0,
            "out_id": "{28ffd5c4-8a80-4d45-bddc-fb80dfb14670}",
            "out_index": 0
        },
        {
            "in_id": "{7ff9e895-1a2a-4842-9873-6fc7d828df44}",
            "in_index": 0,
            "out_id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "out_index": 0
        },
        {
            "in_id": "{9bd6b15f-8836-452c-8577-86e8a4bea318}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{286cf307-3b24-4f3e-af8f-93b59f4c3491}",
            "in_index": 0,
            "out_id": "{a9fd0043-cec8-4363-8e34-bb969ffb9133}",
            "out_index": 0
        },
        {
            "in_id": "{552beefc-9874-482a-9de1-289740306897}",
            "in_index": 0,
            "out_id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "out_index": 0
        },
        {
            "in_id": "{13c975ba-c529-48b7-8e03-d4806a6105af}",
            "in_index": 0,
            "out_id": "{a1b6185e-37cd-454b-8e04-9a64a3944251}",
            "out_index": 0
        },
        {
            "in_id": "{cb1daa9e-049c-449f-9787-c0de5437aab1}",
            "in_index": 0,
            "out_id": "{8185b0c3-25b4-40ca-97e0-fd9694cc18dc}",
            "out_index": 0
        },
        {
            "in_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "in_index": 0,
            "out_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "out_index": 0
        },
        {
            "in_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "in_index": 0,
            "out_id": "{959d598b-8ec8-4e6f-84f0-7645f2bd23b7}",
            "out_index": 0
        },
        {
            "in_id": "{103280e8-e3c3-4bd5-8eee-6f14ffa7821e}",
            "in_index": 0,
            "out_id": "{c26c197f-d213-4e2a-aa50-173783d23fd9}",
            "out_index": 0
        },
        {
            "in_id": "{85178dd2-b9ab-4526-b73d-2b85de6e8c53}",
            "in_index": 0,
            "out_id": "{d7cedd5d-7ac2-401c-a59c-31a5a01aaf33}",
            "out_index": 0
        },
        {
            "in_id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "in_index": 0,
            "out_id": "{428bba8a-7b77-4d6b-97c0-074391911fe1}",
            "out_index": 0
        },
        {
            "in_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "in_index": 0,
            "out_id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "out_index": 0
        },
        {
            "in_id": "{c997d50b-5521-4341-ac0b-3098ee452161}",
            "in_index": 0,
            "out_id": "{219c8557-aa0b-4254-8975-d15897de0857}",
            "out_index": 0
        },
        {
            "in_id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "in_index": 0,
            "out_id": "{fa10d69d-319b-48e3-8f9f-c3f3ef023f0e}",
            "out_index": 0
        },
        {
            "in_id": "{dbb810ff-f010-4bf9-b11e-97d57d8bb594}",
            "in_index": 1,
            "out_id": "{15499d79-dc9e-42f7-8485-4013799b5932}",
            "out_index": 1
        },
        {
            "in_id": "{e712aafb-ba82-4b43-83b0-a19eba121416}",
            "in_index": 0,
            "out_id": "{286cf307-3b24-4f3e-af8f-93b59f4c3491}",
            "out_index": 0
        },
        {
            "in_id": "{d96510f6-c117-47ea-b2ab-149e1d72ac52}",
            "in_index": 0,
            "out_id": "{a1b6185e-37cd-454b-8e04-9a64a3944251}",
            "out_index": 1
        },
        {
            "in_id": "{648ac052-06dc-4689-a48f-bf5a19714ed0}",
            "in_index": 0,
            "out_id": "{398dae78-4fd4-465f-828e-39c382544642}",
            "out_index": 0
        },
        {
            "in_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "in_index": 0,
            "out_id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "out_index": 0
        },
        {
            "in_id": "{5cb93eae-bfde-4e34-904c-7461c7a689d7}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{5fa2d434-029b-489c-a622-2f4fafd0ec78}",
            "in_index": 0,
            "out_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "out_index": 0
        },
        {
            "in_id": "{e5eae1b8-ad9a-46d9-aa49-5d71ecbd6d09}",
            "in_index": 0,
            "out_id": "{59305234-5437-4cc3-b348-d5897a3b061d}",
            "out_index": 0
        },
        {
            "in_id": "{1506f049-b023-4829-a9c6-0bbfe00db77e}",
            "in_index": 0,
            "out_id": "{398dae78-4fd4-465f-828e-39c382544642}",
            "out_index": 0
        },
        {
            "in_id": "{896d57fd-a438-4dff-ba8a-49f526d4da46}",
            "in_index": 0,
            "out_id": "{48e114ca-e8ae-4004-b0b9-3784a9e73e95}",
            "out_index": 0
        },
        {
            "in_id": "{b45162d1-2aca-4dab-9bec-6ffed66668f6}",
            "in_index": 1,
            "out_id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "out_index": 0
        },
        {
            "in_id": "{c26c197f-d213-4e2a-aa50-173783d23fd9}",
            "in_index": 0,
            "out_id": "{53eceeec-f210-4df7-bbe2-2fb9b38c2635}",
            "out_index": 0
        },
        {
            "in_id": "{219c8557-aa0b-4254-8975-d15897de0857}",
            "in_index": 0,
            "out_id": "{16a37bba-4f8e-4b75-94b0-ca1343229f0b}",
            "out_index": 0
        },
        {
            "in_id": "{ccc6765e-9d6a-4b95-b881-762c2b0240a0}",
            "in_index": 0,
            "out_id": "{5355a79a-1a87-49cf-a17d-f834b2058a98}",
            "out_index": 0
        },
        {
            "in_id": "{d82067c6-ae74-4aae-837b-d8bf6efcf049}",
            "in_index": 0,
            "out_id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "out_index": 0
        },
        {
            "in_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "in_index": 0,
            "out_id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "out_index": 0
        },
        {
            "in_id": "{8185b0c3-25b4-40ca-97e0-fd9694cc18dc}",
            "in_index": 0,
            "out_id": "{932e5a76-e37e-44b7-883d-ea5830a22717}",
            "out_index": 0
        },
        {
            "in_id": "{867e4d76-6cb0-412a-bc18-debb1e25efd1}",
            "in_index": 0,
            "out_id": "{b1e12853-243f-44ed-8ddc-3f1c45cb34dd}",
            "out_index": 0
        },
        {
            "in_id": "{a2cd7301-94da-4e3e-becf-5451b99fe991}",
            "in_index": 0,
            "out_id": "{0601f0ca-4615-43bc-af5e-5557323e9a21}",
            "out_index": 0
        },
        {
            "in_id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "in_index": 0,
            "out_id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "out_index": 0
        },
        {
            "in_id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "in_index": 0,
            "out_id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "out_index": 0
        },
        {
            "in_id": "{16a37bba-4f8e-4b75-94b0-ca1343229f0b}",
            "in_index": 1,
            "out_id": "{959d598b-8ec8-4e6f-84f0-7645f2bd23b7}",
            "out_index": 0
        },
        {
            "in_id": "{59305234-5437-4cc3-b348-d5897a3b061d}",
            "in_index": 0,
            "out_id": "{e5eae1b8-ad9a-46d9-aa49-5d71ecbd6d09}",
            "out_index": 0
        },
        {
            "in_id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "in_index": 0,
            "out_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "out_index": 0
        },
        {
            "in_id": "{ab8f33ae-2daf-4bc6-be57-4adb782634aa}",
            "in_index": 0,
            "out_id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "out_index": 0
        },
        {
            "in_id": "{00b5acf8-dab5-4b8e-9528-758dc33d4c94}",
            "in_index": 0,
            "out_id": "{ccc6765e-9d6a-4b95-b881-762c2b0240a0}",
            "out_index": 0
        },
        {
            "in_id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "in_index": 0,
            "out_id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "out_index": 0
        },
        {
            "in_id": "{c92bbdec-9605-4a25-aacb-ef9ae264a13b}",
            "in_index": 0,
            "out_id": "{482521e4-be6a-44c0-b17f-8798da70be7d}",
            "out_index": 0
        },
        {
            "in_id": "{a9fd0043-cec8-4363-8e34-bb969ffb9133}",
            "in_index": 0,
            "out_id": "{48e114ca-e8ae-4004-b0b9-3784a9e73e95}",
            "out_index": 0
        },
        {
            "in_id": "{04685820-f6af-4b87-9249-565bbcbe111f}",
            "in_index": 0,
            "out_id": "{15499d79-dc9e-42f7-8485-4013799b5932}",
            "out_index": 0
        },
        {
            "in_id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "in_index": 1,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "in_index": 0,
            "out_id": "{552beefc-9874-482a-9de1-289740306897}",
            "out_index": 0
        },
        {
            "in_id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "in_index": 0,
            "out_id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "out_index": 0
        },
        {
            "in_id": "{bd3d67e0-9a10-4db1-a9b3-4dff4ddcc07b}",
            "in_index": 0,
            "out_id": "{8185b0c3-25b4-40ca-97e0-fd9694cc18dc}",
            "out_index": 0
        },
        {
            "in_id": "{3e8bc090-ee42-4a29-9c59-006475873034}",
            "in_index": 0,
            "out_id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "out_index": 0
        },
        {
            "in_id": "{398dae78-4fd4-465f-828e-39c382544642}",
            "in_index": 0,
            "out_id": "{1506f049-b023-4829-a9c6-0bbfe00db77e}",
            "out_index": 0
        },
        {
            "in_id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "in_index": 0,
            "out_id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "out_index": 0
        },
        {
            "in_id": "{c06ff6a0-0850-4738-b862-756aa71afeb8}",
            "in_index": 0,
            "out_id": "{da386f9f-498e-4551-adf9-24c43f734610}",
            "out_index": 0
        },
        {
            "in_id": "{7270da17-0484-4a33-aeb9-e8f81ec2fb22}",
            "in_index": 0,
            "out_id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "out_index": 0
        },
        {
            "in_id": "{428bba8a-7b77-4d6b-97c0-074391911fe1}",
            "in_index": 0,
            "out_id": "{5fa2d434-029b-489c-a622-2f4fafd0ec78}",
            "out_index": 0
        },
        {
            "in_id": "{dbb810ff-f010-4bf9-b11e-97d57d8bb594}",
            "in_index": 0,
            "out_id": "{15499d79-dc9e-42f7-8485-4013799b5932}",
            "out_index": 0
        },
        {
            "in_id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "in_index": 0,
            "out_id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "out_index": 0
        },
        {
            "in_id": "{53eceeec-f210-4df7-bbe2-2fb9b38c2635}",
            "in_index": 0,
            "out_id": "{a2cd7301-94da-4e3e-becf-5451b99fe991}",
            "out_index": 0
        },
        {
            "in_id": "{2a48b207-4f29-4acf-aedf-646ad6d62cd7}",
            "in_index": 0,
            "out_id": "{b45162d1-2aca-4dab-9bec-6ffed66668f6}",
            "out_index": 0
        },
        {
            "in_id": "{a1b6185e-37cd-454b-8e04-9a64a3944251}",
            "in_index": 0,
            "out_id": "{04685820-f6af-4b87-9249-565bbcbe111f}",
            "out_index": 0
        }
    ],
    "nodes": [
        {
            "id": "{cb1daa9e-049c-449f-9787-c0de5437aab1}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 31.43378658742961,
                "y": -2670.0171576162397
            }
        },
        {
            "id": "{428bba8a-7b77-4d6b-97c0-074391911fe1}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "1916:7,1912:809,0:835,0:7"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1908:1076,1908:850,3:869,3:1076"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -803.3386222895277,
                "y": -1703.7574453454733
            }
        },
        {
            "id": "{4dbe53e3-8437-44bf-84c9-51dc020f5d00}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1347.599047638457,
                "y": -1685.179469218396
            }
        },
        {
            "id": "{398dae78-4fd4-465f-828e-39c382544642}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2241.180578743144,
                "y": -3591.202561906632
            }
        },
        {
            "id": "{fa10d69d-319b-48e3-8f9f-c3f3ef023f0e}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "0:2,1272:0,1274:534,0:536"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1277:549,1274:712,0:712,0:557"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": true
                }
            },
            "position": {
                "x": -804.4134873706073,
                "y": -4033.780204962527
            }
        },
        {
            "id": "{481fc91e-2e07-4f0e-ab60-5b2b8214cb24}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้า ILM ชั้น 1\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1301.0239315462713,
                "y": -1913.0067547377032
            }
        },
        {
            "id": "{120c9238-7136-4750-958c-ec4839268d03}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -369.1548361560171,
                "y": -2870.5458605811336
            }
        },
        {
            "id": "{7c01eeab-692d-4063-892f-510ea2a2bf6b}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1240.2657261508286,
                "y": -1701.1749099328047
            }
        },
        {
            "id": "{1f4eb50e-95e3-4265-bc2f-f38a66947000}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1232.6852166318286,
                "y": -2865.224174240545
            }
        },
        {
            "id": "{fdf0b4ac-180a-4429-ae38-335f891aed3f}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"1\"\n\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1508.9933578560187,
                "y": -4016.0568220811406
            }
        },
        {
            "id": "{7d8ca676-dbbe-4780-b1d6-8c49b17a44d4}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -513.3535396399486,
                "y": -1702.4889219310155
            }
        },
        {
            "id": "{15499d79-dc9e-42f7-8485-4013799b5932}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -948.0478264342245,
                "y": -2593.1870460760497
            }
        },
        {
            "id": "{e747ed84-2854-4f6c-b1a6-7ce5c55a0a2a}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 89.33228658742973,
                "y": -3820.134257616239
            }
        },
        {
            "id": "{c92bbdec-9605-4a25-aacb-ef9ae264a13b}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -265.1462243920132,
                "y": -3601.410851287443
            }
        },
        {
            "id": "{286cf307-3b24-4f3e-af8f-93b59f4c3491}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1160.441216195851,
                "y": -3726.506631357103
            }
        },
        {
            "id": "{59305234-5437-4cc3-b348-d5897a3b061d}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "time",
                    "show": true
                }
            },
            "position": {
                "x": -2610.6876556530397,
                "y": -2747.8626917620113
            }
        },
        {
            "id": "{ccc6765e-9d6a-4b95-b881-762c2b0240a0}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -296.274862497335,
                "y": -1410.791471320228
            }
        },
        {
            "id": "{48e114ca-e8ae-4004-b0b9-3784a9e73e95}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -890.1493264342243,
                "y": -3743.304146076049
            }
        },
        {
            "id": "{da386f9f-498e-4551-adf9-24c43f734610}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -490.90667480523723,
                "y": -1269.0083780888926
            }
        },
        {
            "id": "{b45162d1-2aca-4dab-9bec-6ffed66668f6}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1218.339716195851,
                "y": -2576.389531357105
            }
        },
        {
            "id": "{13c975ba-c529-48b7-8e03-d4806a6105af}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -515.6510632349895,
                "y": -2593.8289400723647
            }
        },
        {
            "id": "{e712aafb-ba82-4b43-83b0-a19eba121416}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1045.0914751945547,
                "y": -3744.5460011405926
            }
        },
        {
            "id": "{552beefc-9874-482a-9de1-289740306897}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"3\"\n\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1516.599194375017,
                "y": -1684.5191620733933
            }
        },
        {
            "id": "{932e5a76-e37e-44b7-883d-ea5830a22717}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -324.225862497335,
                "y": -2592.7194713202284
            }
        },
        {
            "id": "{a2cd7301-94da-4e3e-becf-5451b99fe991}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1190.388716195851,
                "y": -1394.4615313571048
            }
        },
        {
            "id": "{0ea60c3a-2ded-476f-88dc-f559c37c1403}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -650.9494957005893,
                "y": -4033.92976610075
            }
        },
        {
            "id": "{595c7be1-2c1b-44ea-a60b-8e7405746776}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -505.7730301209485,
                "y": -2866.5381862387558
            }
        },
        {
            "id": "{8412def5-f882-465b-bdc0-6b3477eb7eee}",
            "model": {
                "data": {
                },
                "name": "drawcount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -505.7477031209503,
                "y": -4034.026581938763
            }
        },
        {
            "id": "{71d71246-e246-48eb-9ddd-e9037483f665}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1340.018538119457,
                "y": -2849.2287335261362
            }
        },
        {
            "id": "{1506f049-b023-4829-a9c6-0bbfe00db77e}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "reboot",
                    "show": true
                }
            },
            "position": {
                "x": -2398.612411037495,
                "y": -3591.038625776924
            }
        },
        {
            "id": "{65db2b86-c5ca-41ee-84a2-14a509266acb}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1339.9932111194587,
                "y": -4016.7171292261432
            }
        },
        {
            "id": "{5fa2d434-029b-489c-a622-2f4fafd0ec78}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai1",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer1"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai2",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer2"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai3",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer3"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 1750,
                    "roi_x": 0,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai3",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -945.2206034656298,
                "y": -1700.734736870643
            }
        },
        {
            "id": "{ab42ff59-6660-4b30-861e-822441bfe2fa}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -167.94342202727142,
                "y": -2872.2560190454433
            }
        },
        {
            "id": "{800bdeee-4198-4e00-bab3-8590dfeaf892}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -72.66771341257027,
                "y": -3601.134257616239
            }
        },
        {
            "id": "{0e21d312-f14a-4cd7-a733-527c7b095336}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "\npayload.setparam = {}\npayload.setparam.cameraID = \"2\"\n\n\n\n\n\n\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set param",
                    "show": true
                }
            },
            "position": {
                "x": -1509.018684856017,
                "y": -2848.5684263811336
            }
        },
        {
            "id": "{4764b25b-7810-4206-aa71-01cecad5391e}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai1",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer1"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai2",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer2"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai3",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer3"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 5000,
                    "roi_x": 120,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai1",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -942.6861295880112,
                "y": -4034.3306469873887
            }
        },
        {
            "id": "{5cb93eae-bfde-4e34-904c-7461c7a689d7}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -167.91809502727324,
                "y": -4039.7444147454503
            }
        },
        {
            "id": "{959d598b-8ec8-4e6f-84f0-7645f2bd23b7}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nsec = d.getSeconds()\n\n// time between 10AM and 9PM \nifelse = hour >= 10 && hour <= 20",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "check time",
                    "show": true
                }
            },
            "position": {
                "x": -1968.6102303121343,
                "y": -4016.9500668670107
            }
        },
        {
            "id": "{69403ad7-4523-4496-a2ba-2c8f54a80a06}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 61.97006081733218,
                "y": -1359.0010488804983
            }
        },
        {
            "id": "{e5eae1b8-ad9a-46d9-aa49-5d71ecbd6d09}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2755.308257033702,
                "y": -2750.886010368473
            }
        },
        {
            "id": "{2113d865-e25f-48e7-b9e3-804700acfa30}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -100.02993918266827,
                "y": -1140.0010488804983
            }
        },
        {
            "id": "{3e8bc090-ee42-4a29-9c59-006475873034}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 148.78516752727126,
                "y": -4037.9859099818154
            }
        },
        {
            "id": "{a1b6185e-37cd-454b-8e04-9a64a3944251}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -654.9030958830325,
                "y": -2594.0151315893368
            }
        },
        {
            "id": "{01eb7b9c-c59b-4aa5-bc2b-ded517b68456}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -130.5662134125704,
                "y": -2451.0171576162397
            }
        },
        {
            "id": "{867e4d76-6cb0-412a-bc18-debb1e25efd1}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -127.9809391826683,
                "y": -2321.929048880497
            }
        },
        {
            "id": "{a85fdc67-1c16-426e-9396-d68bfbee4056}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -597.0045958830324,
                "y": -3744.1322315893344
            }
        },
        {
            "id": "{351b00c3-a54d-4437-98c2-65be3e161f6f}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -658.5553322195876,
                "y": -1702.3921060930027
            }
        },
        {
            "id": "{7b3aeafe-0f4c-47a2-94c9-f617db7cd699}",
            "model": {
                "delay_time": 2000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "make sure value",
                    "show": true
                }
            },
            "position": {
                "x": -1814,
                "y": -4017
            }
        },
        {
            "id": "{7682142a-f304-4463-a5b5-f25d9105068c}",
            "model": {
                "camId": "1259",
                "data": {
                    "1259": "rtsp://admin:123456@10.36.8.16:554/video2",
                    "5149": "rtsp://admin:123456@10.36.8.15:554/video2",
                    "8027": "rtsp://admin:123456@10.36.8.14:554/video1"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1084.6613169569566,
                "y": -4033.304054924424
            }
        },
        {
            "id": "{8185b0c3-25b4-40ca-97e0-fd9694cc18dc}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -150.90041157185158,
                "y": -2591.8367830475695
            }
        },
        {
            "id": "{00b5acf8-dab5-4b8e-9528-758dc33d4c94}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -122.94941157185156,
                "y": -1409.908783047571
            }
        },
        {
            "id": "{103280e8-e3c3-4bd5-8eee-6f14ffa7821e}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -766.8680538556099,
                "y": -1411.7662488559508
            }
        },
        {
            "id": "{74bc5faa-e5b1-4dba-8083-253f4066abba}",
            "model": {
                "height": 531,
                "name": "DebugGlobal",
                "payload_h": 0,
                "payload_v": 0,
                "width": 537
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2432.0999999999995,
                "y": -3368.64
            }
        },
        {
            "id": "{dbb810ff-f010-4bf9-b11e-97d57d8bb594}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1305.339716195851,
                "y": -2621.389531357105
            }
        },
        {
            "id": "{9d53b347-9e90-4557-b507-57c518c84aa6}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -179.16313509397682,
                "y": -2136.691803831619
            }
        },
        {
            "id": "{276e4bb9-0bd2-4acf-ace9-20f16d259778}",
            "model": {
                "data": {
                    "count_key": "",
                    "output_style": "both",
                    "payload_key": "DeepDetect",
                    "zones": [
                        {
                            "zone_name": "Zone1",
                            "zone_pts_str": "0:2,1272:0,1274:534,0:536"
                        },
                        {
                            "zone_name": "Zone2",
                            "zone_pts_str": "1277:549,1274:712,0:712,0:557"
                        }
                    ]
                },
                "name": "ZoneCounterP",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": true
                }
            },
            "position": {
                "x": -804.5626147793537,
                "y": -2868.529203615968
            }
        },
        {
            "id": "{28ffd5c4-8a80-4d45-bddc-fb80dfb14670}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "firsttime = getGlobal(\"firsttime_camera\"+payload.setparam.cameraID)\nifelse = firsttime == 1",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "if first time",
                    "show": true
                }
            },
            "position": {
                "x": -626.9520958830325,
                "y": -1412.0871315893364
            }
        },
        {
            "id": "{f0b15d7a-d455-4fd6-8b24-31bd7fb524b3}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1546.7549440149924,
                "y": -3739.1655047537406
            }
        },
        {
            "id": "{d7cedd5d-7ac2-401c-a59c-31a5a01aaf33}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -457.75256323498934,
                "y": -3743.9460400723624
            }
        },
        {
            "id": "{d4ecd395-8218-4327-b9e9-92c93c87ed24}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 91.9175608173324,
                "y": -3691.0461488804963
            }
        },
        {
            "id": "{d82067c6-ae74-4aae-837b-d8bf6efcf049}",
            "model": {
                "data": {
                    "curr_tap": 0,
                    "draw_roi": true,
                    "enable_tracking": true,
                    "font_scale": 1.2,
                    "font_thickness": 2,
                    "frame_buffer": 5,
                    "map_det_cfgs": [
                        {
                            "backend_gpu": true,
                            "config_name": "ai1",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer1"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai2",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer2"
                        },
                        {
                            "backend_gpu": true,
                            "config_name": "ai3",
                            "config_path": "/home/ilm/Desktop/count_customer/resource/ai/customer3"
                        }
                    ],
                    "max_dist": 150,
                    "nms": 0.4,
                    "rect_thickness": 2,
                    "result_drawing": true,
                    "roi_h": 5000,
                    "roi_w": 950,
                    "roi_x": 150,
                    "roi_y": 0,
                    "show_confidence": true,
                    "text_drawing": true,
                    "this_config_name": "ai2",
                    "thresh": 50,
                    "txt_offset": 10
                },
                "name": "DeepDetect ",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -945.3308321527054,
                "y": -2863.055199082759
            }
        },
        {
            "id": "{bd3d67e0-9a10-4db1-a9b3-4dff4ddcc07b}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 34.01906081733216,
                "y": -2540.929048880497
            }
        },
        {
            "id": "{896d57fd-a438-4dff-ba8a-49f526d4da46}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -736.9205538556098,
                "y": -3743.811348855949
            }
        },
        {
            "id": "{2a48b207-4f29-4acf-aedf-646ad6d62cd7}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1102.989975194555,
                "y": -2594.428901140595
            }
        },
        {
            "id": "{a9fd0043-cec8-4363-8e34-bb969ffb9133}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1247.441216195851,
                "y": -3771.506631357103
            }
        },
        {
            "id": "{9bd6b15f-8836-452c-8577-86e8a4bea318}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -171.55729857497846,
                "y": -4468.229463839366
            }
        },
        {
            "id": "{482521e4-be6a-44c0-b17f-8798da70be7d}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -460.9591748052371,
                "y": -3601.0534780888906
            }
        },
        {
            "id": "{c1a10095-7c80-4a62-a566-5ca6d0a157ae}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 141.1793310082729,
                "y": -1706.4482499740682
            }
        },
        {
            "id": "{7ff9e895-1a2a-4842-9873-6fc7d828df44}",
            "model": {
                "height": 367,
                "name": "Debug",
                "output_h": 0,
                "output_v": 0,
                "page_index": 2,
                "payload_h": 0,
                "payload_v": 0,
                "width": 553
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -171.5826255749766,
                "y": -3300.7410681393594
            }
        },
        {
            "id": "{219c8557-aa0b-4254-8975-d15897de0857}",
            "model": {
                "name": "AutoRun",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "start",
                    "show": true
                }
            },
            "position": {
                "x": -2233.3325853425276,
                "y": -4017.6330803223764
            }
        },
        {
            "id": "{c997d50b-5521-4341-ac0b-3098ee452161}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2094.7901360562764,
                "y": -4016.6632012157615
            }
        },
        {
            "id": "{6f81d719-6c74-46b4-9869-beb7d246f68f}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -102.61521341257037,
                "y": -1269.0891576162403
            }
        },
        {
            "id": "{ab8f33ae-2daf-4bc6-be57-4adb782634aa}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"in:\" + payload.InOut.customer_in ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -175.52393154627165,
                "y": -1708.206754737703
            }
        },
        {
            "id": "{648ac052-06dc-4689-a48f-bf5a19714ed0}",
            "model": {
                "data": {
                    "console": "",
                    "height": 359,
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\n// last send data = 9PM then reboot\nifelse = ( hour == 21 && min == 0 && sec > 15)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "splt0": 282,
                        "splt1": 71,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    },
                    "width": 436
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "reboot",
                    "show": true
                }
            },
            "position": {
                "x": -2121.7720683954954,
                "y": -3590.762906145412
            }
        },
        {
            "id": "{48823650-1cac-40ad-9748-8b68c3c7c054}",
            "model": {
                "camId": "5149",
                "data": {
                    "1259": "rtsp://admin:123456@10.36.8.16:554/video2",
                    "5149": "rtsp://admin:123456@10.36.8.15:554/video2",
                    "8027": "rtsp://admin:123456@10.36.8.14:554/video1"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1084.6866439569549,
                "y": -2865.815659224417
            }
        },
        {
            "id": "{85178dd2-b9ab-4526-b73d-2b85de6e8c53}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 0)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "clear firsttime\n",
                    "show": true
                }
            },
            "position": {
                "x": -266.3273624973349,
                "y": -3742.836571320226
            }
        },
        {
            "id": "{a933cd40-8b6b-4776-8efb-d4b71ed4ff6f}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 1\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_in\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "1 IN customer_in\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": 59.38478658742963,
                "y": -1488.0891576162403
            }
        },
        {
            "id": "{d96510f6-c117-47ea-b2ab-149e1d72ac52}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -518.8576748052373,
                "y": -2450.936378088893
            }
        },
        {
            "id": "{0601f0ca-4615-43bc-af5e-5557323e9a21}",
            "model": {
                "name": "PipeConnection"
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1277.388716195851,
                "y": -1439.4615313571048
            }
        },
        {
            "id": "{c12a7293-9672-4b76-9463-b19ff55d4b46}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1632.2934596412097,
                "y": -2848.0543718705076
            }
        },
        {
            "id": "{53eceeec-f210-4df7-bbe2-2fb9b38c2635}",
            "model": {
                "delay_time": 1000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1075.038975194555,
                "y": -1412.5009011405946
            }
        },
        {
            "id": "{efa54390-cd04-4808-8dd7-9c1104188f6d}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้า ILM ชั้น 1\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1293.4434220272713,
                "y": -3077.0560190454435
            }
        },
        {
            "id": "{6e2e7bd0-abae-4f31-8b45-c2bf6a993d5f}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"out:\" + payload.InOut.customer_out ",
                    "size": 17,
                    "widget_state": {
                        "auto_indent": false,
                        "auto_parent": false,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": 148.75984052727313,
                "y": -2870.4975142818084
            }
        },
        {
            "id": "{15650b7a-6ac7-4499-8dc1-4d1a36f268d6}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set to tmp",
                    "show": true
                }
            },
            "position": {
                "x": -93.00191157185145,
                "y": -3741.953883047569
            }
        },
        {
            "id": "{02c6eb2d-7ca8-4f19-bcc2-a0ada014ab4e}",
            "model": {
                "camId": "8027",
                "data": {
                    "1259": "rtsp://admin:123456@10.36.8.16:554/video2",
                    "5149": "rtsp://admin:123456@10.36.8.15:554/video2",
                    "8027": "rtsp://admin:123456@10.36.8.14:554/video1"
                },
                "name": "GstCam",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1092.267153475955,
                "y": -1701.7663949166765
            }
        },
        {
            "id": "{04685820-f6af-4b87-9249-565bbcbe111f}",
            "model": {
                "delay_time": 5000,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "block resend",
                    "show": true
                }
            },
            "position": {
                "x": -794.8190538556099,
                "y": -2593.6942488559494
            }
        },
        {
            "id": "{7270da17-0484-4a33-aeb9-e8f81ec2fb22}",
            "model": {
                "height": 86,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "label = \"CameraID:\" + payload.setparam.cameraID+\"\\n\"\n    +\"ประตูทางเข้า ILM ชั้น 1\"",
                    "size": 12,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 242
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1293.418095027273,
                "y": -4244.54441474545
            }
        },
        {
            "id": "{b1e12853-243f-44ed-8ddc-3f1c45cb34dd}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -323.04472439201334,
                "y": -2451.2937512874437
            }
        },
        {
            "id": "{c26c197f-d213-4e2a-aa50-173783d23fd9}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "d = new Date()\nhour = d.getHours()\nmin = d.getMinutes()\nsec = d.getSeconds()\n\nifelse = false\nif(min % 15 == 0 && sec <= 3){\n     ifelse = true\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "IfElse",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "waiting for 15 min",
                    "show": true
                }
            },
            "position": {
                "x": -920.0968264342245,
                "y": -1411.2590460760503
            }
        },
        {
            "id": "{c06ff6a0-0850-4738-b862-756aa71afeb8}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    subscribe data\n*/\n\ncustomer_in = payload.output.customer_in\ncustomer_out = payload.output.customer_out\ntmp_customer_in = getGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID)\ntmp_customer_out = getGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID)\n\n// update data\nsetGlobal(\"tmp_customer_in_camera\"+payload.setparam.cameraID, payload.output.customer_in)\nsetGlobal(\"tmp_customer_out_camera\"+payload.setparam.cameraID, payload.output.customer_out)\n\n/*\n    output data\n*/\n\npayload.output.customer_in = customer_in - tmp_customer_in\npayload.output.customer_out = customer_out - tmp_customer_out\n\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "calculate\nand update tmp",
                    "show": true
                }
            },
            "position": {
                "x": -295.0937243920133,
                "y": -1269.3657512874443
            }
        },
        {
            "id": "{c946d5d3-c72a-4ad0-b1b8-d30f8a0365b5}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -369.12950915601897,
                "y": -4038.03425628114
            }
        },
        {
            "id": "{91ca5642-fa04-418e-b14c-6f349018b575}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1639.8739691602098,
                "y": -1684.0051075627673
            }
        },
        {
            "id": "{f4fcc32c-7c31-46b7-9038-7301874ad693}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "if(typeof payload.InOut.customer_in == \"undefined\"){\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, 0)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, 0)\n}\nelse{\n    setGlobal(\"customer_in_camera\"+payload.setparam.cameraID, payload.InOut.customer_in)\n    setGlobal(\"customer_out_camera\"+payload.setparam.cameraID, payload.InOut.customer_out)\n}",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Publish data",
                    "show": true
                }
            },
            "position": {
                "x": -376.73534567501724,
                "y": -1706.4965962733934
            }
        },
        {
            "id": "{e705180d-2162-43d4-9432-3b938539f7d7}",
            "model": {
                "data": {
                    "process": "process = \"reboot\""
                },
                "name": "Process",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2011.8069020817175,
                "y": -3590.762906145412
            }
        },
        {
            "id": "{46936324-dfce-4fa7-bdc6-7f649d6e11da}",
            "model": {
                "data": {
                    "zone1": "Zone1",
                    "zone2": "Zone2"
                },
                "name": "InOutCount",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -650.9748227005873,
                "y": -2866.441370400743
            }
        },
        {
            "id": "{ae38b669-ccd8-4103-bc6e-f4759eead199}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1554.3607805339907,
                "y": -1407.6278447459938
            }
        },
        {
            "id": "{7511dcac-50ab-431f-b76b-41a0f595207a}",
            "model": {
                "height": 111,
                "label": {
                    "bold": true,
                    "console": "",
                    "font": "Ubuntu",
                    "key": "var m = new Date();\n\nvar show_datestring =\n    m.getFullYear() + \"/\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"/\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"0\" + m.getSeconds()).slice(-2);\n    \nlabel = show_datestring",
                    "size": 19,
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 23,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "Label",
                "node_enable": true,
                "width": 293
            },
            "ngo": {
                "comment": {
                    "data": "just for show",
                    "show": true
                }
            },
            "position": {
                "x": -2441.257849274668,
                "y": -2742.70884009322
            }
        },
        {
            "id": "{5355a79a-1a87-49cf-a17d-f834b2058a98}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "/*\n    before 15 minutes\n    database format\n*/\nvar m = new Date();\nm.setMinutes(m.getMinutes() -15)\nvar database_datestring =\n    m.getFullYear() + \"-\" +\n    (\"0\" + (m.getMonth()+1)).slice(-2) + \"-\" +\n    (\"0\" + m.getDate()).slice(-2) + \" \" +\n    (\"0\" + m.getHours()).slice(-2) + \":\" +\n    (\"0\" + m.getMinutes()).slice(-2) + \":\" +\n    (\"00.00\");\n\n/*\n    subscribe data\n*/\ncustomer_in = getGlobal(\"customer_in_camera\"+payload.setparam.cameraID)\ncustomer_out = getGlobal(\"customer_out_camera\"+payload.setparam.cameraID)\n\n/*\n    send data and time\n*/\npayload.output = {}\npayload.output.customer_in = customer_in\npayload.output.customer_out = customer_out\npayload.output.database_datestring = database_datestring\nprint(payload.output.customer_in)\nprint(payload.output.customer_out)\nprint(payload.output.database_datestring)\n\n",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 19,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "Subscribe data\nsend data and time",
                    "show": true
                }
            },
            "position": {
                "x": -487.70006323498944,
                "y": -1411.9009400723644
            }
        },
        {
            "id": "{46db8940-4df1-485b-8264-963fefb1c59a}",
            "model": {
                "delay_time": 33,
                "name": "Delay",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -1232.6598896318303,
                "y": -4032.712569940552
            }
        },
        {
            "id": "{16a37bba-4f8e-4b75-94b0-ca1343229f0b}",
            "model": {
                "name": "RelaySwitch",
                "relay_status": true
            },
            "ngo": {
                "comment": {
                    "data": "",
                    "show": false
                }
            },
            "position": {
                "x": -2344.387089816264,
                "y": -4001.208928966592
            }
        },
        {
            "id": "{3fa2ed85-ea8e-4170-9f4c-8cf59c2783ad}",
            "model": {
                "data": {
                    "console": "",
                    "js_code": "setGlobal(\"firsttime_camera\"+payload.setparam.cameraID, 1)",
                    "widget_state": {
                        "auto_indent": true,
                        "auto_parent": true,
                        "size": 11,
                        "style": "Dracula",
                        "widget_st_w": 0,
                        "word_wrap": false
                    }
                },
                "name": "JavaScript",
                "node_enable": true
            },
            "ngo": {
                "comment": {
                    "data": "set firsttime",
                    "show": true
                }
            },
            "position": {
                "x": -1546.7802710149906,
                "y": -2571.677109053734
            }
        },
        {
            "id": "{6d254d7e-2fff-465b-8317-d9629b18db30}",
            "model": {
                "name": "ButtonRun"
            },
            "ngo": {
                "comment": {
                    "data": "Manual start",
                    "show": true
                }
            },
            "position": {
                "x": -1632.2681326412114,
                "y": -4015.5427675705146
            }
        },
        {
            "id": "{c0c0dd56-ab12-43a5-b619-0e9fb35e8809}",
            "model": {
                "data": {
                    "comment": "",
                    "py_ver": "2. python3.8",
                    "script": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                    "tmp_path": "/home/ilm"
                },
                "height": 47,
                "name": "PythonScript",
                "node_enable": true,
                "python_code": "import pyodbc\nimport pandas as pd\nimport platform\n\ndriverSQL = ''    \nif (platform.platform().lower().find('window') >= 0):\n    driverSQL = '{SQL Server}'\nif (platform.platform().lower().find('linux') >= 0):\n    driverSQL = '{ODBC Driver 18 for SQL Server}'\n\ndef insert2SQL (result):\n    \"\"\" Function for update result after process \n        and update queue status to done\n\n    Parameters\n    ----------\n    result : dataframe\n        result's dataframe\n        \n    \"\"\"\n        \n    server = '10.10.6.101'\n    database = 'AI_COUNTING'\n    username = 'innovation'\n    password = 'innovation1234.'\n    \n    cnxn = pyodbc.connect('DRIVER='+driverSQL+';SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password+\";TrustServerCertificate=yes\" ,autocommit=True)\n    crsr = cnxn.cursor()\n    \n    crsr.fast_executemany = True \n\n    Tcolumn = '?'\n    for x in range(len(result.columns) - 1):\n        Tcolumn = Tcolumn + ',?'\n    \n    sql = \"INSERT INTO result_pplCounting (cfg_camera_id,direction_id,data_date,data) VALUES (\" + Tcolumn + \")\"\n    \n    print(sql)\n    \n    params = [ tuple(row[1]) for row in result.iterrows()]\n    \n    print(params)\n    \n    print ('start insert ' , str(len(params)) ,' rows')\n    \n    for i in range (len(params)):\n        crsr.execute(sql,params[i])\n\n#direction id (1 IN) (2 OUT) (3 GO-HDI) (4 GO-FUR) (5 GO-WIN)\n\ncfg_camera = int(payload[\"setparam\"][\"cameraID\"])\ndirection_id = 2\ndatabase_datestring = payload[\"output\"][\"database_datestring\"]\ndata = payload[\"output\"][\"customer_out\"]\n\ndata = {'cfg_camera_id': [cfg_camera],'direction_id': [direction_id], \n'data_date':[database_datestring], \n'data':[data]}\n\nresult=pd.DataFrame(data)\nprint(result)\n\ninsert2SQL(result)\n",
                "width": 75
            },
            "ngo": {
                "comment": {
                    "data": "2 OUT customer_out\nexport Database",
                    "show": true
                }
            },
            "position": {
                "x": -70.08243918266817,
                "y": -3472.0461488804963
            }
        }
    ],
    "scene_data": {
        "flow_view_pos_x": -2000.9164166455566,
        "flow_view_pos_y": -3584.069983539396,
        "flow_view_zoom_factor": 1.4641000000000006
    }
}
